-- 
-- INSTALL
-- 
-- Install instructions.
-- 
-- Copyright (C) 1994, 1995, 1996, 1999, 2000, 2001, 2002 Free Software
-- Foundation, Inc.
-- Portions Copyright (C) 1999 Martin Grabmueller <mgrabmue@cs.tu-berlin.de>
-- Portions Copyright (C) 2000, 2003 Stefan Jahn <stefan@lkcc.org>
-- 
-- This is free software; you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; either version 2, or (at your option)
-- any later version.
-- 
-- This software is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
-- 
-- You should have received a copy of the GNU General Public License
-- along with this package; see the file COPYING.  If not, write to
-- the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
-- Boston, MA 02111-1307, USA.  
--


Basic Installation
==================

   These are generic installation instructions.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, and a
file `config.log' containing compiler output (useful mainly for
debugging `configure').

   It can also use an optional file (typically called `config.cache'
and enabled with `--cache-file=config.cache' or simply `-C') that saves
the results of its tests to speed up reconfiguring.  (Caching is
disabled by default to prevent problems with accidental use of stale
cache files.)

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If you are using the cache, and at
some point `config.cache' contains results you don't want to keep, you
may remove or edit it.

   The file `configure.ac' (or `configure.in') is used to create
`configure' by a program called `autoconf'.  You only need
`configure.ac' if you want to change it or regenerate `configure' using
a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  Run `./configure --help'
for details on some of the pertinent environment variables.

   You can give `configure' initial values for configuration parameters
by setting variables in the command line or in the environment.  Here
is an example:

     ./configure CC=c89 CFLAGS=-O2 LIBS=-lposix

   *Note Defining Variables::, for more details.

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not support the `VPATH'
variable, you have to compile the package for one architecture at a
time in the source code directory.  After you have installed the
package for one architecture, use `make distclean' before reconfiguring
for another architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

   There may be some features `configure' cannot figure out
automatically, but needs to determine by the type of machine the package
will run on.  Usually, assuming the package is built to be run on the
_same_ architectures, `configure' can figure that out, but if it prints
a message saying it cannot guess the machine type, give it the
`--build=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name which has the form:

     CPU-COMPANY-SYSTEM

where SYSTEM can have one of these forms:

     OS KERNEL-OS

   See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the machine type.

   If you are _building_ compiler tools for cross-compiling, you should
use the `--target=TYPE' option to select the type of system they will
produce code for.

   If you want to _use_ a cross compiler, that generates code for a
platform different from the build platform, you should specify the
"host" platform (i.e., that on which the generated programs will
eventually be run) with `--host=TYPE'.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Defining Variables
==================

   Variables not defined in a site shell script can be set in the
environment passed to `configure'.  However, some packages may run
configure again during the build, and the customized values of these
variables may be lost.  In order to avoid this problem, you should set
them in the `configure' command line, using `VAR=value'.  For example:

     ./configure CC=/usr/local2/bin/gcc

will cause the specified gcc to be used as the C compiler (unless it is
overridden in the site shell script).

`configure' Invocation
======================

   `configure' recognizes the following options to control how it
operates.

`--help'
`-h'
     Print a summary of the options to `configure', and exit.

`--version'
`-V'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`--cache-file=FILE'
     Enable the cache: use and save the results of the tests in FILE,
     traditionally `config.cache'.  FILE defaults to `/dev/null' to
     disable caching.

`--config-cache'
`-C'
     Alias for `--cache-file=config.cache'.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`configure' also accepts some other, not widely useful, options.  Run
`configure --help' for more details.

`--enable-warn'
	With this option you enable the detection of various compiler
	warning switches.  Most guessed options come from GCC.
`--enable-opt'
	When enabling this feature the configure script tries some of
	the commonly known compiler optimization switches.
`--with-opt=FLAGS'
	You can pass here a comma separated list of additional compiler
	flags which will be tested.  This feature is only active if you
	specified the above `--enable-opt' switch.
`--enable-ppro'
	If you want to compile for the i686 target try this option.
`--enable-486'
	Compiler optimizations for the i486 target of GCC.  If you passed
	`--enable-ppro' and this option could be used, then the i486
	option will be silently dropped.
`--enable-debug'
	All of the debug messages (debug: some annoying crap text) can
	be suppressed by setting the debug level (-v).	If you do not
	want these messages built in at all then disable this feature.
`--enable-control-proto'
	If you enable this feature the control protocol will be supported
	by Serveez.  This protocol is for remote control of the server.
`--enable-irc-proto'
	Enabling this feature tells the software package to support the
	IRC (Internet Relay Chat) protocol.
`--enable-irc-ts'
	This feature is only available if you enabled the IRC protocol.
	If you enabled both of them then Serveez will support the so
	called TimeStamp protocol, which is an EFNet extension of the
	original IRC protocol.	In order to connect to EFNet you MUST
	use this option.
`--enable-awcs-proto'
	In order to use the Serveez software for the textSure (C) chat
	system you MUST enable this feature.
`--enable-http-proto'
	When using Serveez as part of the textSure (C) chat system you
	will will have need of an additional web server.  This option
	makes Serveez support a simple HTTP protocol.
`--enable-flood'
	If you enable this feature Serveez will support a simple built-in
	flood protection.  It is always useful to protect the software
	from flood clients.
`--with-guile=DIR'
	The DIR argument specifies a Guile installation directory.
`--with-guile-source=DIR'
	If the user wants to link Serveez against a static Guile core
	library you can pass the DIR argument to specify the location of a
	Guile source distribution which will then be configured and built.
`--with-mingw=DIR'
	When compiling under M$-Windows the DIR argument specifies the path
	to the extra MinGW32 library and header files.	If you want the
	final executable to use the Cygwin project's cygwin1.dll instead,
	you have to disable this option by passing configure script
	`--without-mingw' or `--with-mingw=no'.
`--enable-sntp-proto'
	This option enables support for a simple network time protocol
	server.
`--enable-poll'
	If the target system supports poll() and this feature is
	enabled the main file descriptor loop is done via poll().
	This helps to work around the (g)libc's file descriptor limit.
	Otherwise Serveez always falls back to the select() system call.
`--enable-sendfile'
	This option enables the use of the sendfile() system call.
	Disabling it using `--disable-sendfile' provides a work-around
	for bogus implementations of sendfile().
`--enable-gnutella'
	If you do *not* want the Gnutella spider client compiled in you
	need to *disable* this option.
`--enable-crypt'
	This option tells Serveez to process any passwords as crypt()ed.
`--enable-tunnel'
	If you enable this feature the port forwarder will be included.
	This is useful if you plan to use Serveez as a gateway or
	firewall workaround.
`--enable-fakeident'
	By enabling this you will get a fake ident server included in
	the binary executable.
`--enable-guile-server'
	If you enable this feature the user is able to write servers
	using Guile.
`--enable-passthrough'
	This includes the program passthrough server in the Serveez 
	binary.  The server provides basic inetd functionality.
`--enable-iflist'
	If Serveez is unable to detect the correct list of local network
	interfaces (serveez -i) you can disable this option and setup
	them manually in the configuration file.
`--enable-heap-count'
	This option depends on `--enable-debug'.  With the debugging option
	disabled there is also no support for heap counters.  The heap
	counters are used to detect memory leaks in Serveez.
`--with-thread-safety'
	If this option is enabled (disabled by default) Serveez provides
	some thread safety functionality which can be used by applications
	based on the Serveez core API and by Serveez itself.

Please also read the README file.
