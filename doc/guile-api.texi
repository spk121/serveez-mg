@c -*-texinfo-*-
@c
@c This file includes the documentation about the Guile servers.  It is
@c included by `serveez.texi'.
@c

This section describes the Guile interface to Serveez which provides
the ability to write servers with Guile.  Of course, you could do this
without any help from Serveez, but it makes the task a lot easier.
This interface reduces the Guile implementation of an Internet server
to a simple data processor.

@subsubsection Special Data Types

Serveez extends Guile by various new data types which represent internal
data structures of Serveez's core API.

@itemize @bullet
@item @code{#<svz-servertype>}
represents a server type.
@item @code{#<svz-server>}
represents a server (an instance of a server type).
@item @code{#<svz-socket>}
represents a socket structure.
@end itemize

@subsubsection Passing Binary Data

The bytevector data type provides access to any kind of unstructured
data.  It manages the data exchange between Guile and Serveez.
Serveez-MG adds a few additional bytevector routines, for convenience.

@defun subbytevector bv start end
Create a new bytevector that is a copy of BV from START (inclusive)
to END (exclusive).

This procedure in the @code{(serveez-mg lib)} library.
@end defun

@defun bytevector-contains bv1 bv2
Search for bytevector BV2 in bytevector BV1.  If it is found, return
the index in BV1 where BV2 is located.  Otherwise, return #f.

This procedure in the @code{(serveez-mg lib)} library.
@end defun

@subsubsection Server Definition

In order to set up a new server type, you use the procedure
@code{(define-servertype!)}.  This procedure takes one argument which
must be an associative list specifying the server type in detail.
There are optional and mandatory elements you can set up in this alist.

The following example shows the overall syntax of this procedure:

@lisp
(define-servertype! '(

  ;; Mandatory: server type prefix for later use in (define-server!)
  (prefix          . "foo")

  ;; Mandatory: server type description
  (description     . "guile foo server")

  ;; Mandatory for TCP and PIPE servers: protocol detection
  (detect-proto    . foo-detect-proto)

  ;; Optional: global server type initialisation
  (global-init     . foo-global-init)

  ;; Optional: server instance initialisation
  (init            . foo-init)

  ;; Optional: server instance finalisation
  (finalize        . foo-finalize)

  ;; Optional: global server type finalisation
  (global-finalize . foo-global-finalize)

  ;; Mandatory for TCP and PIPE servers: socket connection
  (connect-socket  . foo-connect-socket)

  ;; Optional: server instance info
  (info-server     . foo-info-server)

  ;; Optional: client info
  (info-client     . foo-info-client)

  ;; Optional: server instance reset callback
  (reset           . foo-reset)
  
  ;; Optional: server instance notifier
  (notify          . foo-notify)
  
  ;; Mandatory for UDP and ICMP servers: packet handler
  (handle-request  . foo-handle-request)

  ;; Mandatory: server type configuration (may be an empty list)
  (configuration   . (

    ;; The server configuration is an alist (associative list) again.
    ;; Each item consists of an item name and a list describing the 
    ;; item itself.
    ;; Syntax: (key . (type defaultable default))
    (foo-integer       . (integer  #t 0))
    (foo-integer-array . (intarray #t (1 2 3 4 5)))
    (foo-string        . (string   #t "default-foo-string"))
    (foo-string-array  . (strarray #t ("guile" "foo" "server")))
    (foo-hash          . (hash     #t (("foo" . "bar"))))
    (foo-port          . (portcfg  #t foo-port))
    (foo-boolean       . (boolean  #t #t))
  ))))
@end lisp

@c doc-snarfer [guile-server.c:1611]
@defun define-servertype! args
Guile server definition: This procedure takes one argument containing
the information about a new server type.  If everything works fine you
have a freshly registered server type afterwards.  Return @code{#t} on
success.
@end defun


@subsubsection Predefined Procedures

The following subset of procedures may be used to implement a Guile
server.  They should be used within the callbacks defined in the
@code{(define-servertype!)} procedure.  Each of these callbacks gets
passed the appropriate arguments needed to stuff into the following
procedures.  Please have a look at the example Guile servers for the
details.

@c doc-snarfer [guile-api.c:471]
@defun svz:sock? sock
Returns @code{#t} if the given cell @var{sock} is an instance of a valid
@code{#<svz-socket>}, otherwise @code{#f}.
@end defun

@c doc-snarfer [guile-server.c:893]
@defun svz:sock:check-request sock proc
Set the @code{check-request} member of the socket structure @var{sock}
to the Guile procedure @var{proc}.  Returns the previously handler if
there is any.
@end defun

@c doc-snarfer [guile-api.c:554]
@defun svz:sock:check-oob-request sock proc
With this procedure you can setup the @code{check-oob-request} callback
of the given socket structure @var{sock}.  The previous callback is
replaced by the @var{proc} procedure and will be returned if there was
set any before.  The callback is run whenever urgent data (out-of-band)
has been detected on the socket.
@end defun

@c doc-snarfer [guile-api.c:929]
@defun svz:sock:send-oob sock oob
This procedure expects a TCP @code{#<svz-socket>} in @var{sock} and an
exact number or single character in @var{oob}.  The byte in @var{oob}
is sent as urgent (out-of-band) data through the underlying TCP stream.
The procedure returns @code{#t} on successful completion and otherwise
(either it failed to send the byte or the passed socket is not a TCP
socket) @code{#f}.
@end defun

@c doc-snarfer [guile-server.c:884]
@defun svz:sock:handle-request sock proc
Set the @code{handle-request} member of the socket structure @var{sock}
to the Guile procedure @var{proc}.  The procedure returns the previously
set handler if there is any.
@end defun

@c doc-snarfer [guile-server.c:909]
@defun svz:sock:boundary sock boundary
Setup the packet boundary of the socket @var{sock}.  The given string value
@var{boundary} can contain any kind of data.  If you pass an exact number
value the socket is setup to parse fixed sized packets.  In fact this
procedure sets the @code{check-request} callback of the given socket
structure @var{sock} to a predefined routine which runs the
@code{handle-request} callback of the same socket when it detected a
complete packet specified by @var{boundary}.  For instance you
can setup Serveez to pass your @code{handle-request} procedure text lines
by calling @code{(svz:sock:boundary sock "\n")}.
@end defun

@c doc-snarfer [guile-server.c:948]
@defun svz:sock:floodprotect sock flag
Set or unset the flood protection bit of the given socket @var{sock}.
Returns the previous value of this bit (#t or #f).  The @var{flag}
argument must be either boolean or an exact number and is optional.
@end defun

@c doc-snarfer [guile-server.c:975]
@defun svz:sock:print sock buffer
Write the string buffer @var{buffer} to the socket @var{sock}.  The
procedure accepts binary smobs too.  Return @code{#t} on success and
@code{#f} on failure.
@end defun

@c doc-snarfer [guile-api.c:423]
@defun svz:sock:final-print sock
This procedure schedules the socket @var{sock} for shutdown after all data
within the send buffer queue has been sent.  The user should issue this
procedure call right *before* the last call to @code{(svz:sock:print)}.
@end defun

@c doc-snarfer [guile-api.c:441]
@defun svz:sock:no-delay sock enable
Turns the Nagle algorithm for the TCP socket @var{sock} on or off depending
on the optional @var{enable} argument.  Returns the previous state of this
flag (@code{#f} if Nagle is active, @code{#t} otherwise).  By default this
flag is switched off.  This socket option is useful when dealing with small
packet transfer in order to disable unnecessary delays.
@end defun

@c doc-snarfer [guile-api.c:199]
@defun svz:sock:send-buffer sock
Return the send buffer of the socket @var{sock} as a binary smob.
@end defun

@c doc-snarfer [guile-api.c:219]
@defun svz:sock:send-buffer-size sock size
This procedure returns the current send buffer size and fill status in
bytes of the socket @var{sock} as a pair of exact numbers.  If the
optional argument @var{size} is given the send buffer will be set to
the specified size in bytes.
@end defun

@c doc-snarfer [guile-api.c:157]
@defun svz:sock:receive-buffer sock
Return the receive buffer of the socket @var{sock} as a binary smob.
@end defun

@c doc-snarfer [guile-api.c:178]
@defun svz:sock:receive-buffer-size sock size
Returns the current receive buffers size and fill status in bytes of
the socket @var{sock} as a pair of exact numbers.  If the optional
argument @var{size} is given the receive buffer will be set to the
specified size in bytes.
@end defun

@c doc-snarfer [guile-api.c:243]
@defun svz:sock:receive-buffer-reduce sock length
Dequeue @var{length} bytes from the receive buffer of the socket
@var{sock} which must be a valid @code{#<svz-socket>}.  If the user omits
the optional @var{length} argument, all of the data in the receive buffer
gets dequeued.  Returns the number of bytes actually shuffled away.
@end defun

@c doc-snarfer [guile-api.c:82]
@defun svz:sock:connect host proto port
Establishes a network connection to the given @var{host} [ :@var{port} ].
If @var{proto} equals @code{PROTO_ICMP} the @var{port} argument is
ignored.  Valid identifiers for @var{proto} are @code{PROTO_TCP},
@code{PROTO_UDP} and @code{PROTO_ICMP}.  The @var{host} argument must be
either a string in dotted decimal form, a valid hostname or an exact number
in host byte order.  When giving a hostname this operation might be
blocking.  The @var{port} argument must be an exact number in the range from
0 to 65535, also in host byte order.  Returns a valid @code{#<svz-socket>}
or @code{#f} on failure.
@end defun

@c doc-snarfer [guile-api.c:498]
@defun svz:sock:disconnected sock proc
Set the @code{disconnected-socket} member of the socket structure
@var{sock} to the Guile procedure @var{proc}.  The given callback
runs whenever the socket is lost for some external reason.  The procedure
returns the previously set handler if there is one.
@end defun

@c doc-snarfer [guile-api.c:509]
@defun svz:sock:kicked sock proc
Sets the @code{kicked-socket} callback of the given socket structure
@var{sock} to the Guile procedure @var{proc} and returns any previously
set procedure.  This callback gets called whenever the socket gets
closed by Serveez intentionally.
@end defun

@c doc-snarfer [guile-api.c:530]
@defun svz:sock:trigger sock proc
Sets the @code{trigger} callback of the socket structure @var{sock} to
the Guile procedure @var{proc} and returns any previously set procedure.
The callback is run when the @code{trigger-condition} callback returned
@code{#t}.
@end defun

@c doc-snarfer [guile-api.c:520]
@defun svz:sock:trigger-condition sock proc
This procedure sets the @code{trigger-condition} callback for the socket
structure @var{sock} to the Guile procedure @var{proc}.  It returns the
previously set procedure if available.  The callback is run once every
server loop indicating whether the @code{trigger} callback should be
run or not.
@end defun

@c doc-snarfer [guile-api.c:543]
@defun svz:sock:idle sock proc
This procedure sets the @code{idle} callback of the socket structure
@var{sock} to the Guile procedure @var{proc}.  It returns any previously
set procedure.  The callback is run by the periodic task scheduler when the
@code{idle-counter} of the socket structure drops to zero.  If this counter
is not zero it gets decremented once a second.  The @code{idle}
callback can reset @code{idle-counter} to some value and thus can
re-schedule itself for a later task.
@end defun

@c doc-snarfer [guile-api.c:566]
@defun svz:sock:idle-counter sock counter
This functions returns the socket structure @var{sock}'s current
@code{idle-counter} value.  If the optional argument @var{counter} is
given, the function sets the @code{idle-counter}.  Please have a look at the
@code{(svz:sock:idle)} procedure for the exact meaning of this value.
@end defun

@c doc-snarfer [guile-server.c:1024]
@defun svz:sock:data sock data
Associate any kind of data (any Guile object) given in the argument
@var{data} with the socket @var{sock}.  The @var{data} argument is
optional.  The procedure always returns a previously stored value or an
empty list.
@end defun

@c doc-snarfer [guile-api.c:329]
@defun svz:sock:parent sock parent
Return the given socket's @var{sock} parent and optionally set it to the
socket @var{parent}.  The procedure returns either a valid
@code{#<svz-socket>} object or an empty list.
@end defun

@c doc-snarfer [guile-api.c:353]
@defun svz:sock:referrer sock referrer
Return the given socket's @var{sock} referrer and optionally set it to the
socket @var{referrer}.  The procedure returns either a valid
@code{#<svz-socket>} or an empty list.
@end defun

@c doc-snarfer [guile-api.c:381]
@defun svz:sock:server sock server
This procedure returns the @code{#<svz-server>} object associated with the
given argument @var{sock}.  The optional argument @var{server} can be used
to redefine this association and must be a valid @code{#<svz-server>}
object.  For a usual socket callback like @code{connect-socket} or
@code{handle-request}, the association is already in place.  But for sockets
created by @code{(svz:sock:connect)}, you can use it in order to make the
returned socket object part of a server.
@end defun

@c doc-snarfer [guile-api.c:301]
@defun svz:sock:local-address sock address
This procedure returns the current local address as a pair like
@code{(host .  port)} with both entries in network byte order.  If you pass
the optional argument @var{address}, you can set the local address of
the socket @var{sock}.
@end defun

@c doc-snarfer [guile-api.c:272]
@defun svz:sock:remote-address sock address
This procedure returns the current remote address as a pair like
@code{(host .  port)} with both entries in network byte order.  If you pass
the optional argument @var{address}, you can set the remote address of
the socket @var{sock}.
@end defun

@c doc-snarfer [guile-api.c:833]
@defun svz:sock:find ident
The given argument @var{ident} must be a pair of numbers where the
car is a @code{#<svz-socket>}'s identification number and the cdr the
version number.  The procedure returns either the identified
@code{#<svz-socket>} or @code{#f} if the given combination is not
valid anymore.
@end defun

@c doc-snarfer [guile-api.c:857]
@defun svz:sock:ident sock
This procedure returns a pair of numbers identifying the given
@code{#<svz-socket>} @var{sock} which can be passed to
@code{(svz:sock:find)}.  This may be necessary when you are passing
a @code{#<svz-socket>} through coserver callback arguments in order to
verify that the passed @code{#<svz-socket>} is still valid when the
coserver callback runs.
@end defun

@c doc-snarfer [guile-api.c:408]
@defun svz:sock:protocol sock
Returns one of the @code{PROTO_TCP}, @code{PROTO_UDP}, @code{PROTO_ICMP},
@code{PROTO_RAW} or @code{PROTO_PIPE} constants indicating the type of
the socket structure @var{sock}.  If there is no protocol information
available the procedure returns @code{#f}.
@end defun

@c doc-snarfer [guile-api.c:875]
@defun svz:read-file port size
This procedure returns either a binary smob containing a data block read
from the open input port @var{port} with a maximum number of @var{size}
bytes or the end-of-file object if the underlying ports end has been
reached.  The size of the returned binary smob may be less than the
requested size @var{size} if it exceed the current size of the given port
@var{port}.  The procedure throws an exception if an error occurred while
reading from the port.
@end defun


@c doc-snarfer [guile-api.c:484]
@defun svz:server? server
Returns @code{#t} if the given cell @var{server} is an instance of a valid
@code{#<svz-server>}, otherwise @code{#f}.
@end defun

@c doc-snarfer [guile-api.c:588]
@defun svz:server:listeners server
Returns a list of listening @code{#<svz-socket>} smobs to which the
given server instance @var{server} is currently bound, or an empty list
if there is no such binding yet.
@end defun

@c doc-snarfer [guile-api.c:630]
@defun svz:server:clients server
Returns a list of @code{#<svz-socket>} client smobs associated with
the given server instance @var{server} in arbitrary order, or an
empty list if there is no such client.
@end defun

@c doc-snarfer [guile-server.c:1114]
@defun svz:server:config-ref server key
This procedure returns the configuration item specified by @var{key} of
the given server instance @var{server}.  You can pass this function a
socket too.  In this case the procedure will lookup the appropriate server
instance itself.  If the given string @var{key} is invalid (not defined
in the configuration alist in @code{(define-servertype!)}) then it returns
an empty list.
@end defun

@c doc-snarfer [guile-server.c:1180]
@defun svz:server:state-set! server key value
Associates the Guile object @var{value} with the string @var{key}.  The
given @var{server} argument can be both, a @code{#<svz-server>} or a
@code{#<svz-socket>}.  Returns the previously associated object or an
empty list if there was no such association.  This procedure is useful
for server instance state savings.
@end defun

@c doc-snarfer [guile-server.c:1154]
@defun svz:server:state-ref server key
Returns the Guile object associated with the string value @var{key} which
needs to be set via @code{(svz:server:state-set!)} previously.  Otherwise
the return value is an empty list.  The given @var{server} argument must be
either a valid @code{#<svz-server>} object or a @code{#<svz-socket>}.
@end defun

@c doc-snarfer [guile-server.c:1213]
@defun svz:server:state->hash server
Converts the @var{server} instance's state into a Guile hash.
Returns an empty list if there is no such state yet.
@end defun


@c doc-snarfer [guile.c:1528]
@defun serveez-port? name
Returns @code{#t} if the given string @var{name} corresponds with a
registered port configuration, otherwise the procedure returns
@code{#f}.
@end defun

@c doc-snarfer [guile.c:1534]
@defun serveez-server? name
Checks whether the given string @var{name} corresponds with an
instantiated server name and returns @code{#t} if so.
@end defun

@c doc-snarfer [guile.c:1541]
@defun serveez-servertype? name
This procedure checks whether the given string @var{name} is a valid
server type prefix known in Serveez and returns @code{#t} if so.
Otherwise it returns @code{#f}.
@end defun

@c doc-snarfer [guile-server.c:297]
@defun serveez-exceptions enable
Controls the use of exceptions handlers for the Guile procedure calls
of Guile server callbacks.  If the optional argument @var{enable} set to
@code{#t} exception handling is enabled and if set to @code{#f}
exception handling is disabled.  The procedure always returns the
current value of this behaviour.
@end defun

@c doc-snarfer [guile-server.c:281]
@defun serveez-nuke
This procedure can be used to schedule Serveez for shutdown within Guile.
Serveez will shutdown all network connections and terminate after the next
event loop.  You should use this instead of issuing @code{(quit)}.
@end defun

@c @c doc-snarfer [guile.c:1643]
@c @defun serveez-load file
@c This procedure can be used as a replacement for @code{(primitive-load)}
@c in serveez configuration files.  It tries to locate the given filename
@c @var{file} in the paths returned by @code{(serveez-loadpath)}.  If
@c @var{file} cannot be loaded the procedure returns @code{#f}.
@c @end defun

@c @c doc-snarfer [guile.c:1485]
@c @defun serveez-loadpath args
@c Make the search path for the Serveez core library accessible for Guile.
@c Returns a list a each path as previously defined.  Can override the current
@c definition of this load path.  The load path is used to tell Serveez where
@c it can find additional server modules.
@c @end defun

@c doc-snarfer [guile.c:1432]
@defun serveez-interfaces args
Make the list of local interfaces accessible for Guile.  Returns the
local interfaces as a list of ip addresses in dotted decimal form.  If
another list is given in @var{args} it should contain the new list of
local interfaces.
@end defun

@c doc-snarfer [guile-api.c:676]
@defun portmap prognum versnum protocol port
A user interface to the portmap service, which establishes a mapping
between the triple [@var{prognum},@var{versnum},@var{protocol}] and
@var{port} on the machine's portmap service.  The value of @var{protocol}
is most likely @code{IPPROTO_UDP} or @code{IPPROTO_TCP}.
If the user omits @var{protocol} and @var{port}, the procedure destroys
all mapping between the triple [@var{prognum},@var{versnum},*] and ports
on the machine's portmap service.
@end defun

@c doc-snarfer [guile-api.c:740]
@defun svz:coserver:dns host callback arg
This procedure enqueues the @var{host} string argument into the internal
DNS coserver queue.  When the coserver responds, the Guile procedure
@var{callback} is run as @code{(callback addr arg)}.  The @var{addr}
argument passed to the callback is a string representing the appropriate
IP address for the given hostname @var{host}.  If you omit the optional
argument @var{arg} it is run as @code{(callback addr)} only.  The @var{arg}
argument may be necessary if you need to have the callback procedure
in a certain context.
@end defun

@c doc-snarfer [guile-api.c:773]
@defun svz:coserver:reverse-dns addr callback arg
This Guile procedure enqueues the given @var{addr} argument which must be
an IP address in network byte order into the internal reverse DNS coserver
queue.  When the coserver responds, the Guile procedure @var{callback} is
run as @code{(callback host arg)} where @var{host} is the hostname of the
requested IP address @var{addr}.  The last argument @var{arg} is
optional.
@end defun

@c doc-snarfer [guile-api.c:804]
@defun svz:coserver:ident sock callback arg
This procedure enqueues the given @code{#<svz-socket>} @var{sock} into the
internal ident coserver queue.  When the coserver responds, it runs the
Guile procedure @var{callback} as @code{(callback user arg)} where
@var{user} is the corresponding username for the client connection
@var{sock}.  The @var{arg} argument is optional.
@end defun


@subsubsection Callback Prototypes

The Guile interface of Serveez is completely callback driven.
Callbacks can be set up in the associative list passed to
@code{(define-servertype!)}, or by using the predefined procedures
described in the previous section.  Each of the callbacks is passed
certain arguments and is meant to return specific values to indicate
success or failure.  This section describes each of these callbacks.

@table @code
@item (global-init #<svz-servertype>)
This callback is invoked once for every type of server right after
the @code{(define-servertype!)} statement.  Here you can initialise
resources shared between all instances of your server type.  The callback
is optional and can be set up in @code{(define-servertype!)}.  It should
return zero to indicate success and non-zero to indicate failure.  If the
global initialiser fails, Serveez will refuse to register the server type.

@item (global-finalize #<svz-servertype>)
If you want to free shared resources, which were possibly allocated
within the global initialiser, you can do so here.  The callback is
invoked when Serveez shuts down (issued by @code{(serveez-nuke)}) or the
server type gets unregistered for some reason.  It should return zero to
signal success.  The callback can be set up in @code{(define-servertype!)}
and is optional.

@item (init #<svz-server>)
Within this callback you can initialise everything you might need for
a single instance of your server.  The callback is invoked for each
server instance which has been created by @code{(define-server!)} and
should return zero to indicate success, otherwise Serveez rejects the
server instance.  The callback can be set up in @code{(define-servertype!)}
and is optional.

@item (finalize #<svz-server>)
The server instance finaliser gets its instance representation passed
as argument.  You need to free all resources used by this server
instance which might have been allocated within the server instance
initialiser or consumed while running.  You can set this callback in
the @code{(define-servertype!)} statement.  The callback is optional
and should return zero to indicate success.

@item (detect-proto #<svz-server> #<svz-socket>)
Connection oriented protocols like TCP and PIPE allow more than one
server to be listening on the same network port.  Therefore, it is
necessary to be able to detect the type of client connecting to a port.

This callback takes two arguments; the first is the server instance
and the second is the client socket object containing the client
connection information.  You can set up this callback in the
@code{(define-servertype!)} statement.

Serveez may invoke this callback several times as data becomes
available from the client until one of the servers recognises it.
The servers can retrieve the data received so far using the
@code{(svz:sock:receive-buffer)} call.

To indicate successful client detection, you need to return a non-zero
value.  (Note that for historical reasons, this is inconsistent with
other functions which return zero on successful completion.)  Once the
server has indicated success, Serveez invokes any further callbacks for
the connection only on that server.

If no server has recognised the client after the first 16 bytes, Serveez
will close the connection.  The connection will also be closed if the
client has not sent enough data for a server to recognise it within 30
seconds of connecting.

If multiple servers are listening on the same network port, Serveez
invokes this callback for each of them in an arbitrary order.  Only one
server at most should indicate successful detection.

This callback is mandatory for servers which get bound to
connection oriented protocol (TCP and PIPE) port configurations by
@code{(bind-server!)}.

@item (connect-socket #<svz-server> #<svz-socket>)
If the client detection signalled success, this callback is invoked to
assign the client connection to a server instance.  The arguments are
the same as the detection callback.  In this callback you can assign
all the connection specific callbacks for your server and perform some
initial tasks.  Basically you should specify the @code{handle-request}
and/or @code{check-request} callback.  This can be achieved by calling
@code{(svz:sock:handle-request)} and @code{(svz:sock:check-request)}.
The @code{connect-socket} callback is also mandatory for connection
oriented protocols and must be defined in @code{(define-servertype!)}.
On success you should return zero, otherwise the connection will be
shutdown by Serveez.

@item (info-server #<svz-server>)
This callback gets invoked when requested by the builtin
@ref{Control Protocol Server}.  The callback is optional and can be
set up in @code{(define-servertype!)}.  The returned character string
can be multiple lines separated by @code{\r\n} (but without a trailing
separator).  Usually you will return information about the server instance
configuration and/or state.

@item (info-client #<svz-server> #<svz-socket>)
This callback is optional.  You can set it up in the 
@code{(define-servertype!)} procedure.  It is meant to provide socket
structure specific information.  (The socket structure is a client/child
of the given server instance.)  You need to return a single line
character string without trailing newlines.  The information provided
can be requested by the builtin @ref{Control Protocol Server}.

@item (notify #<svz-server>)
The server instance notifier callback will be invoked whenever there is idle
time available.  In practice, it is run approximately once a second.
A server instance can use it to perform periodic tasks.  The callback
is optional and can be set up in @code{(define-servertype!)}.

@item (reset #<svz-server>)
This callback is invoked when the Serveez process receives a @code{SIGHUP} 
signal which can be issued via @samp{killall -HUP serveez} from user
land.  If the underlying operating system does not provide @code{SIGHUP}
there is no use for this callback.  It provides the possibility to 
perform asynchronous tasks scheduled from outside Serveez.  You can
optionally set it up in the @code{(define-servertype!)} procedure.

@item (handle-request #<svz-socket> #<svz-binary> size)
This callback is invoked whenever a complete packet has been detected
in the receive buffer.  The packet data is passed to the callback as a
@code{#<svz-binary>}.  The @var{size} argument is passed for convenience
and specifies the length of the packet in bytes.

The detection, and therefore the invocation, can be made in one of two
ways.  When Serveez can determine itself when a packet is complete, the
callback will be invoked directly.  Serveez can make this determination
for connections with packet oriented protocols such as UDP and ICMP, or
if you tell Serveez how to parse the packet using
@code{(svz:sock:boundary sock delimiter)} or 
@code{(svz:sock:boundary sock size)} and do not specify a 
@code{check-request} callback.

Whenever you specify a @code{check-request} callback to determine when
a packet is complete, it becomes the responsiblity of that callback to
invoke @code{handle-request} itself.

Serveez recognises two different return value meanings.  For connection
oriented protocols (TCP and PIPE), zero indicates success and non-zero
failure; on failure, Serveez will shutdown the connection.  For packet
oriented protocols (UDP and ICMP), a non-zero return value indicates
that your server was able to process the passed packet data, otherwise
(zero return value) the packet can be passed to other servers listening
on the same port configuration.

This callback must be specified in @code{(define-servertype!)} for
packet oriented protocols (UDP and ICMP) but is optional otherwise.
You can modify the callback by calling @code{(svz:sock:handle-request)}.

@item (check-request #<svz-socket>)
This callback is invoked whenever new data has arrived in the receive buffer.
The receive buffer of the given @code{#<svz-socket>} can be obtained
using @code{(svz:sock:receive-buffer)}.  The callback is initially not
set and can be set up with @code{(svz:sock:check-request)}.  Its purpose
is to check whether a complete request was received.  If so, it should
be handled (by running the @code{handle-request} callback) and removed
from the receive buffer (using @code{(svz:sock:receive-buffer-reduce)}).
The callback is for connection oriented protocols (TCP and PIPE) only.
You should return zero to indicate success and non-zero to indicate
failure.  On failure Serveez shuts the connection down.

@item (disconnected #<svz-socket>)
The @code{disconnected} callback gets invoked whenever the socket is
lost for some external reason and is going to be shutdown by Serveez.
It can be set up with @code{(svz:sock:disconnected)}.

@item (kicked #<svz-socket> reason)
This callback gets invoked whenever the socket gets closed by Serveez
intentionally.  It can be set up with @code{(svz:sock:kicked)}.  The
@var{reason} argument can be either @code{KICK_FLOOD}, indicating the
socket is a victim of the builtin flood protection, or @code{KICK_QUEUE}
which indicates a send buffer overflow.

@item (idle #<svz-socket>)
The @code{idle} callback gets invoked from the periodic task scheduler,
which maintains a @code{idle-counter} for each socket structure.
This counter is decremented whenever Serveez becomes idle and the
callback is invoked when it drops to zero.  The @code{idle} callback can
set its socket's @code{idle-counter} to some value with the procedure
@code{(svz:sock:idle-counter)} and thus re-schedule itself for a later
task.  You can set up this callback with @code{(svz:sock:idle)}.

@item (trigger-condition #<svz-socket>)
This callback is invoked once every server loop for the socket structure.
If you return @code{#f} nothing else is happening.  Otherwise the 
@code{trigger} callback will be invoked immediately.  You can set up the 
callback using the procedure @code{(svz:sock:trigger-condition)}.

@item (trigger #<svz-socket>)
The @code{trigger} callback is invoked when the @code{trigger-condition} 
returns @code{#t}.  The callback can be set up with the procedure 
@code{(svz:sock:trigger)}.  Returning a non-zero value shuts the 
connection down.  A zero return value indicates success.  This callback
can be used to perform connection related updates, e.g. you can ensure
a certain send buffer fill.

@item (check-oob-request #<svz-socket> oob-byte)
This callback is invoked whenever urgent data (out-of-band) has been detected 
on a socket.  Initially this event is ignored and the callback can be set 
up with the procedure @code{(svz:sock:check-oob-request)}.  The 
@var{oob-byte} argument is a number containing the received out-of-band
data byte ranging from 0 to 255.  If the callback returns non-zero the
connection will be shutdown.  A zero return value indicates success.  You
can use @code{(svz:sock:send-oob)} to send a single out-of-band data byte.
@end table
