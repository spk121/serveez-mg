dnl -*-autoconf-*-
dnl
dnl configure.in
dnl
dnl Autoconf input file.
dnl
dnl Copyright (C) 2000, 2001, 2002, 2003, 2004 Stefan Jahn <stefan@lkcc.org>
dnl Copyright (C) 2000, 2001 Raimund Jacob <raimi@lkcc.org>
dnl Copyright (C) 1999 Martin Grabmueller <mgrabmue@cs.tu-berlin.de>
dnl
dnl This is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU General Public License as published by
dnl the Free Software Foundation; either version 2, or (at your option)
dnl any later version.
dnl 
dnl This software is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl GNU General Public License for more details.
dnl 
dnl You should have received a copy of the GNU General Public License
dnl along with this package; see the file COPYING.  If not, write to
dnl the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
dnl Boston, MA 02111-1307, USA.  
dnl

dnl ----------------------------------------------------------------------

dnl
dnl Initialize autoconf and automake
dnl
AC_INIT(serveez,0.1.7,bug-serveez@gnu.org)
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE(serveez,0.1.7,no-define)
AM_CONFIG_HEADER(config.h src/svzconfig.h)

dnl
dnl Determine if maintainer portions of the Makefiles should be included.
dnl
AM_MAINTAINER_MODE

dnl ----------------------------------------------------------------------

dnl
dnl Check for a proper C compiler.
dnl
AC_PROG_CC

AC_C_CONST
const_defined="const"
if test $ac_cv_c_const = no; then
  const_defined=""
fi
AC_DEFINE_UNQUOTED(svz_c_const, $const_defined,
  [Define to empty if the keyword does not work.])
unset const_defined

AC_CACHE_CHECK([whether byte ordering is bigendian], svz_cv_sys_bigendian,
[AC_TRY_RUN([#include <stdio.h>
  #include <string.h>
  main () {
    unsigned char c_big[] = {0x12, 0x34};
    unsigned short s_big = 0x1234;
    if (!memcmp (c_big, &s_big, sizeof (char) * 2))
      exit (0);
    exit (1);}],
  svz_cv_sys_bigendian=yes,
  svz_cv_sys_bigendian=no,
  svz_cv_sys_bigendian=no)])

if test $svz_cv_sys_bigendian = yes ; then
  AC_DEFINE(WORDS_BIGENDIAN, 1, 
  [Define if your processor stores words with the most significant 
   byte first (like Motorola and SPARC, unlike Intel and VAX).])
fi

AC_CHECK_SIZEOF(long, 4)
AC_CHECK_SIZEOF(void *, 4)
if test $ac_cv_sizeof_long -lt $ac_cv_sizeof_void_p ; then
  AC_MSG_ERROR([A 'void *' value does not fit into a 'long' value.])
fi

dnl
dnl Locate required external software.
dnl
AC_PROG_INSTALL
AC_PROG_AWK
AC_CHECK_PROG(AR, ar, ar, :)
AC_CHECK_PROG(WINDRES, windres, windres, :)

dnl ----------------------------------------------------------------------

osversion="`grep \"$host\" $srcdir/data/PLATFORMS 2>/dev/null`"
if test "x$osversion" = "x"; then
  AC_MSG_RESULT([
  The Serveez package has never been compiled or run on this platform.  
  Please send an email to <dev-serveez@gnu.org> including your compiler 
  version and whether it worked correctly or not.  '$host' 
  will then be added to the PLATFORMS file included in this package.
])
fi
unset osversion

dnl ----------------------------------------------------------------------

case $host in
  mipsel-unknown-linux-gnu | mips-unknown-linux-gnu) NOUNDEFINED="" ;;
  *) NOUNDEFINED="-no-undefined" ;;
esac
AC_SUBST(NOUNDEFINED)

dnl ----------------------------------------------------------------------

EXTRALIBS=""
CPPEXTRAFLAGS=""
SERVERLIBS=""
SERVERDIRS=""
SERVEEZ_LIBS=""
SERVEEZ_LDFLAGS=""

AC_SUBST(CPPEXTRAFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(SERVERLIBS)
AC_SUBST(SERVERDIRS)
AC_SUBST(SERVEEZ_LIBS)
AC_SUBST(SERVEEZ_LDFLAGS)

dnl ----------------------------------------------------------------------

dnl
dnl Check whether compilation warnings are desired.
dnl

AC_ARG_ENABLE([warn],
  [  --enable-warn           Turn on most compiler warnings @<:@default=no@:>@],
  if test "$enableval" = "yes" ; then
    define_enable_warn="yes"
  fi)

if test "x$define_enable_warn" = "xyes" ; then
  save_cflags="$CFLAGS"
  warn_cflags=""
  warnflags="-W -fullwarn -pedantic"

  dnl Only make these tests if we are using GNU C
  if test x$GCC = xyes ; then
    warnflags="$warnflags -Wall -Wcast-align -Wstrict-prototypes \
                          -Wformat -Wno-unused -Wno-long-long"
  fi

  dnl Test this compiler flag under Linux only.
  case $host_os in
    linux*)
	warnflags="$warnflags -ansi"
	;;
  esac

  for flag in $warnflags; do
    CFLAGS="$flag"
    AC_MSG_CHECKING([whether $CC accepts $CFLAGS])
    AC_TRY_COMPILE(,,warn_cflags="$warn_cflags $CFLAGS"
      AC_MSG_RESULT([yes]), AC_MSG_RESULT([no]))
  done
  unset warnflags

  CFLAGS="$save_cflags"
  CPPEXTRAFLAGS="$warn_cflags"
  unset warn_cflags
  unset save_cflags
fi
unset define_enable_warn

dnl ----------------------------------------------------------------------

dnl
dnl Check whether compilation optimizations are desired.
dnl

AC_MSG_CHECKING([whether to enable optimizations])
AC_ARG_ENABLE([opt],
  [  --enable-opt            Turn on compiler optimizations @<:@default=no@:>@],
  if test x$enableval = "xyes" ; then
    define_enable_opt=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_opt=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_opt=no
  AC_MSG_RESULT([no]))

if test $define_enable_opt = yes ; then
  save_cflags="$CFLAGS"
  opt_cflags=""
  opt_ldflags=""

  dnl Only make these tests if we are using GNU C
  if test x$GCC = xyes ; then
    optflags="-O2 -fomit-frame-pointer -fstrength-reduce -funroll-loops \
              -finline-functions -fexpensive-optimizations \
	      -fcaller-saves -frerun-loop-opt -foptimize-register-move \
	      -ffunction-cse -fpeephole -momit-leaf-frame-pointer"
    [arch=`eval echo "$host_cpu" | sed 's/i\([0-9]\)86/\1/g'`
    if test "$arch" = "$host_cpu" ; then arch="5"; fi
    if test `expr $arch` -gt 4; then
      optflags="$optflags -fschedule-insns2"
    fi]
    unset arch
    for flag in $optflags; do
      CFLAGS="$flag"
      AC_MSG_CHECKING([whether $CC accepts $CFLAGS])
      AC_TRY_COMPILE(,,opt_cflags="$opt_cflags $CFLAGS" 
        AC_MSG_RESULT([yes]), AC_MSG_RESULT([no]))
    done
    unset optflags
    CFLAGS="-m486"
    AC_MSG_CHECKING([whether $CC accepts $CFLAGS])
    AC_TRY_COMPILE(,,opt_is486="yes"; AC_MSG_RESULT([yes]), 
		     opt_is486="no";  AC_MSG_RESULT([no]))
    CFLAGS="-march=pentiumpro"
    AC_MSG_CHECKING([whether $CC accepts $CFLAGS])
    AC_TRY_COMPILE(,,opt_isPPro="yes"; AC_MSG_RESULT([yes]), 
		     opt_isPPro="no";  AC_MSG_RESULT([no]))

  dnl Other compiler than GNU C
  else
    optflags="-O3"
    for flag in $optflags; do
      CFLAGS="$flag"
      AC_MSG_CHECKING([whether $CC accepts $CFLAGS])
      AC_TRY_COMPILE(,,opt_cflags="$opt_cflags $CFLAGS" 
        AC_MSG_RESULT([yes]), AC_MSG_RESULT([no]))
    done
    unset optflags
  fi

  dnl Check for additional optimization compiler flags.
  AC_ARG_WITH([opt],
  [  --with-opt=FLAGS        Additional optimization flags @<:@comma separated@:>@],
    [case "$withval" in
     no)  optflags="" ;;
     yes) optflags="" ;;
     *)   optflags=`echo "$withval" | sed 's/,/ /g'` ;;
    esac],
    optflags="")
  for flag in $optflags; do
    CFLAGS="$flag"
    AC_MSG_CHECKING([whether $CC accepts $CFLAGS])
    AC_TRY_COMPILE(,,opt_cflags="$opt_cflags $CFLAGS" 
      AC_MSG_RESULT([yes]), AC_MSG_RESULT([no]))
  done
  unset optflags

  LDFLAGS="-s"
  AC_MSG_CHECKING([whether $CC accepts $LDFLAGS])
  AC_TRY_LINK(,,opt_ldflags="$opt_ldflags $LDFLAGS" 
    AC_MSG_RESULT([yes]), AC_MSG_RESULT([no]))

  if test x$opt_isPPro = "xyes" ; then
    AC_MSG_CHECKING([whether to enable i686 optimizations])
    AC_ARG_ENABLE([ppro],
      [  --enable-ppro           Turn on i686 optimizations @<:@default=no@:>@],
      if test x$enableval = "xyes" ; then
	opt_cflags="$opt_cflags -march=pentiumpro"
	opt_isPPro="done"
	AC_MSG_RESULT([yes])
      else
	AC_MSG_RESULT([no])
      fi,
      AC_MSG_RESULT([no]))
  fi

  if test x$opt_is486 = "xyes" -a ! x$opt_isPPro = "xdone" ; then
    AC_MSG_CHECKING([whether to enable i486 optimizations])
    AC_ARG_ENABLE([486],
      [  --disable-486           Turn on i486 optimizations @<:@default=yes@:>@],
      if test x$enableval = "xyes" ; then
	opt_cflags="$opt_cflags -m486"
	AC_MSG_RESULT([yes])
      else
	AC_MSG_RESULT([no])
      fi,
      opt_cflags="$opt_cflags -m486"
      AC_MSG_RESULT([yes]))
  fi

  LDFLAGS="$opt_ldflags"
  CPPEXTRAFLAGS="$CPPEXTRAFLAGS $opt_cflags"
  CFLAGS=""
  unset save_cflags
  unset opt_cflags
  unset opt_ldflags
fi

AC_SUBST(CFLAGS)
AC_SUBST(LDFLAGS)
unset define_enable_opt

dnl ----------------------------------------------------------------------

dnl
dnl Check whether debug output should be included.
dnl

AC_MSG_CHECKING([whether to enable debug output])
AC_ARG_ENABLE([debug],
  [  --disable-debug         Include debug output @<:@default=yes@:>@],
  if test x$enableval = "xyes" ; then
    define_enable_debug=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_debug=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_debug=yes
  AC_MSG_RESULT([yes]))

if test $define_enable_debug = yes ; then
  AC_DEFINE(SVZ_ENABLE_DEBUG, 1, [Define if debug output should be supported.])
else
  AC_DEFINE(NDEBUG, 1, [Define if debug code should be suppressed.])
fi
unset define_enable_debug

dnl ----------------------------------------------------------------------

dnl
dnl Check whether we try to list local interfaces.
dnl

AC_MSG_CHECKING([whether to enable list of local interfaces])
AC_ARG_ENABLE([iflist],
  [  --disable-iflist        List local interfaces @<:@default=yes@:>@],
  if test x$enableval = "xyes" ; then
    define_enable_iflist=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_iflist=no
    AC_MSG_RESULT([no])
    fi,
  define_enable_iflist=yes
  AC_MSG_RESULT([yes]))

if test $define_enable_iflist = yes ; then
    AC_DEFINE(ENABLE_IFLIST,
      1, [Define if we are able to list local network interfaces.])
fi
unset define_enable_iflist

dnl ----------------------------------------------------------------------

dnl
dnl Check whether poll loop should be supported.
dnl

AC_MSG_CHECKING([whether to enable poll loop])
AC_ARG_ENABLE([poll],
  [  --disable-poll          Include poll() server loop @<:@default=yes@:>@],
  if test x$enableval = "xyes" ; then
    define_enable_poll=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_poll=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_poll=yes
  AC_MSG_RESULT([yes]))

if test $define_enable_poll = yes ; then
  AC_DEFINE(ENABLE_POLL,
    1, [Define if poll() should be supported if possible.])
fi
unset define_enable_poll

dnl ----------------------------------------------------------------------

dnl
dnl Check whether sendfile() should be supported.
dnl

AC_MSG_CHECKING([whether to use sendfile() if possible])
AC_ARG_ENABLE([sendfile],
  [  --disable-sendfile      Include sendfile() support @<:@default=yes@:>@],
  if test x$enableval = "xyes" ; then
    define_enable_sendfile=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_sendfile=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_sendfile=yes
  AC_MSG_RESULT([yes]))

if test $define_enable_sendfile = yes ; then
  AC_DEFINE(ENABLE_SENDFILE,
    1, [Define if sendfile() should be supported if possible.])
fi
unset define_enable_sendfile

dnl ----------------------------------------------------------------------

dnl
dnl Check whether some thread safety functionality should be included.
dnl

AC_ARG_WITH([thread-safety],
  [  --with-thread-safety    Enable some thread-safety functionality @<:@default=no@:>@],
  [case "$withval" in
   no)  enable_threads="no" ;;
   yes) enable_threads="yes" ;;
   *)   enable_threads="yes" ;;
  esac],
  enable_threads="no")

dnl ----------------------------------------------------------------------

dnl
dnl Check whether the SNTP server should be included.
dnl

AC_MSG_CHECKING([whether to enable the SNTP server])
AC_ARG_ENABLE([sntp-proto],
  [  --disable-sntp-proto    Include the SNTP server @<:@default=yes@:>@],
  if test x$enableval = "xyes" ; then
    define_enable_sntp=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_sntp=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_sntp=yes
  AC_MSG_RESULT([yes]))

if test $define_enable_sntp = yes ; then
  AC_DEFINE(ENABLE_SNTP_PROTO,
    1, [Define if the SNTP server should be included.])
  SERVERLIBS="$SERVERLIBS sntp-server/libsntp.a"
  SERVERDIRS="$SERVERDIRS sntp-server"
fi
unset define_enable_sntp

dnl ----------------------------------------------------------------------

dnl
dnl Check whether the Gnutella server should be included.
dnl

AC_MSG_CHECKING([whether to enable the Gnutella spider])
AC_ARG_ENABLE([gnutella],
  [  --disable-gnutella      Include the Gnutella spider @<:@default=yes@:>@],
  if test x$enableval = "xyes" ; then
    define_enable_nut=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_nut=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_nut=yes
  AC_MSG_RESULT([yes]))

if test $define_enable_nut = yes ; then
  AC_DEFINE(ENABLE_GNUTELLA,
    1, [Define if the Gnutella spider should be included.])
  SERVERLIBS="$SERVERLIBS nut-server/libnut.a"
  SERVERDIRS="$SERVERDIRS nut-server"
fi
unset define_enable_nut

dnl ----------------------------------------------------------------------

dnl
dnl Check whether the Tunnel server should be included.
dnl

AC_MSG_CHECKING([whether to enable the port forwarder])
AC_ARG_ENABLE([tunnel],
  [  --disable-tunnel        Include port forwarder @<:@default=yes@:>@],
  if test x$enableval = "xyes" ; then
    define_enable_tunnel=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_tunnel=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_tunnel=yes
  AC_MSG_RESULT([yes]))

if test $define_enable_tunnel = yes ; then
  AC_DEFINE(ENABLE_TUNNEL,
    1, [Define if the port forwarder should be included.])
  SERVERLIBS="$SERVERLIBS tunnel-server/libtunnel.a"
  SERVERDIRS="$SERVERDIRS tunnel-server"
fi
unset define_enable_tunnel

dnl ----------------------------------------------------------------------

dnl
dnl Check whether the control protocol should be included.
dnl

AC_MSG_CHECKING([whether to enable support for the control protocol])
AC_ARG_ENABLE([control-proto],
  [  --disable-control-proto Include the control protocol @<:@default=yes@:>@],
  if test x$enableval = "xyes" ; then
    define_enable_control_proto=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_control_proto=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_control_proto=yes
  AC_MSG_RESULT([yes]))

if test $define_enable_control_proto = yes ; then
  AC_DEFINE(ENABLE_CONTROL_PROTO,
    1, [Define if the control protocol should be supported.])
  SERVERLIBS="$SERVERLIBS ctrl-server/libctrl.a"
  SERVERDIRS="$SERVERDIRS ctrl-server"
fi
unset define_enable_control_proto

dnl ----------------------------------------------------------------------

dnl
dnl Check whether the IRC protocol should be included.
dnl

AC_MSG_CHECKING([whether to enable support for the IRC protocol])
AC_ARG_ENABLE([irc-proto],
  [  --disable-irc-proto     Include the IRC protocol @<:@default=yes@:>@],
  if test x$enableval = "xyes" ; then
    define_enable_irc_proto=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_irc_proto=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_irc_proto=yes
  AC_MSG_RESULT([yes]))

if test $define_enable_irc_proto = yes ; then
  AC_DEFINE(ENABLE_IRC_PROTO,
    1, [Define if the IRC protocol should be supported.])
  SERVERLIBS="$SERVERLIBS irc-server/libircserver.a irc-core/libirccore.a"
  SERVERDIRS="$SERVERDIRS irc-server irc-core"
fi
unset define_enable_irc_proto

dnl ----------------------------------------------------------------------

dnl
dnl Check whether the IRC protocol "TimeStamp" extension should be included.
dnl

AC_MSG_CHECKING([whether to enable TimeStamp for the IRC protocol])
AC_ARG_ENABLE([irc-ts],
  [  --disable-irc-ts        Include TimeStamp in IRC protocol @<:@default=yes@:>@],
  if test x$enableval = "xyes" ; then
    define_enable_irc_ts=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_irc_ts=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_irc_ts=yes
  AC_MSG_RESULT([yes]))

if test $define_enable_irc_ts = yes ; then
  AC_DEFINE(ENABLE_TIMESTAMP,
    1, [Define if the IRC protocol TimeStamp extension should be supported.])
fi
unset define_enable_irc_ts

dnl ----------------------------------------------------------------------

dnl
dnl Check whether the password encryption should be included.
dnl

AC_MSG_CHECKING([whether to enable password encryption])
AC_ARG_ENABLE([crypt],
  [  --enable-crypt          Include password encryption @<:@default=no@:>@],
  if test x$enableval = "xyes" ; then
    define_enable_crypt=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_crypt=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_crypt=no
  AC_MSG_RESULT([no]))

dnl ----------------------------------------------------------------------

dnl
dnl Check whether the aWCS protocol should be included.
dnl

AC_MSG_CHECKING([whether to enable support for the aWCS protocol])
AC_ARG_ENABLE([awcs-proto],
  [  --disable-awcs-proto    Include the aWCS protocol @<:@default=yes@:>@],
  if test x$enableval = "xyes" ; then
    define_enable_awcs_proto=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_awcs_proto=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_awcs_proto=yes
  AC_MSG_RESULT([yes]))

if test $define_enable_awcs_proto = yes ; then
  AC_DEFINE(ENABLE_AWCS_PROTO,
    1, [Define if the aWCS protocol should be supported.])
  SERVERLIBS="$SERVERLIBS awcs-server/libawcs.a"
  SERVERDIRS="$SERVERDIRS awcs-server"
fi
unset define_enable_awcs_proto

dnl ----------------------------------------------------------------------

dnl
dnl Check whether the HTTP protocol should be included.
dnl

AC_MSG_CHECKING([whether to enable support for the HTTP protocol])
AC_ARG_ENABLE([http-proto],
  [  --disable-http-proto    Include the HTTP protocol @<:@default=yes@:>@],
  if test x$enableval = "xyes" ; then
    define_enable_http_proto=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_http_proto=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_http_proto=yes
  AC_MSG_RESULT([yes]))

if test $define_enable_http_proto = yes ; then
  AC_DEFINE(ENABLE_HTTP_PROTO,
    1, [Define if the HTTP protocol should be supported.])
  SERVERLIBS="$SERVERLIBS http-server/libhttp.a"
  SERVERDIRS="$SERVERDIRS http-server"
fi
unset define_enable_http_proto

dnl ----------------------------------------------------------------------

dnl
dnl Check whether the Fake Ident Server should be included.
dnl

AC_MSG_CHECKING([whether to enable the fake ident server])
AC_ARG_ENABLE([fakeident],
  [  --disable-fakeident     Include the fake ident server @<:@default=yes@:>@],
  if test x$enableval = "xyes" ; then
    define_enable_fakeident=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_fakeident=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_fakeident=yes
  AC_MSG_RESULT([yes]))

if test $define_enable_fakeident = yes ; then
  AC_DEFINE(ENABLE_FAKEIDENT,
    1, [Define if the Fake Ident Server should be included.])
  SERVERLIBS="$SERVERLIBS fakeident-server/libfakeident.a"
  SERVERDIRS="$SERVERDIRS fakeident-server"
fi
unset define_enable_fakeident

dnl ----------------------------------------------------------------------

dnl
dnl Check whether the passthrough server should be included.
dnl

AC_MSG_CHECKING([whether to enable the passthrough server])
AC_ARG_ENABLE([passthrough],
  [  --disable-passthrough   Include the passthrough server @<:@default=yes@:>@],
  if test x$enableval = "xyes" ; then
    define_enable_prog=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_prog=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_prog=yes
  AC_MSG_RESULT([yes]))

if test $define_enable_prog = yes ; then
  AC_DEFINE(ENABLE_PROG_SERVER,
    1, [Define if the program passthrough server should be included.])
  SERVERLIBS="$SERVERLIBS prog-server/libprog.a"
  SERVERDIRS="$SERVERDIRS prog-server"
fi
unset define_enable_prog

dnl ----------------------------------------------------------------------

dnl
dnl Check whether the flood protection should be included.
dnl

AC_MSG_CHECKING([whether to enable support for flood protection])
AC_ARG_ENABLE([flood],
  [  --disable-flood         Include flood protection @<:@default=yes@:>@],
  if test x$enableval = "xyes" ; then
    define_enable_flood=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_flood=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_flood=yes
  AC_MSG_RESULT([yes]))

if test $define_enable_flood = yes; then
  AC_DEFINE(SVZ_ENABLE_FLOOD_PROTECTION,
    1, [Define if flood protection should be supported.])
fi
unset define_enable_flood

dnl ----------------------------------------------------------------------

dnl
dnl Check for additional searchpath for MinGW32 headers and libraries.
dnl

AC_ARG_WITH([mingw],
  [  --with-mingw=DIR        MinGW32 files are in DIR @<:@/usr/local/mingw@:>@],
  [case "$withval" in
   no)  MINGDIR="no" ;;
   yes) MINGDIR="/usr/local/mingw" ;;
   *)   MINGDIR="$withval" ;;
  esac],
  MINGDIR="/usr/local/mingw")

dnl
dnl Check if this is Win32 (CYGWIN/MINGW32).
dnl

case $host_os in
  *mingw32* ) MINGW32=yes;;
          * ) MINGW32=no;;
esac
case $host_os in
  *cygwin* ) CYGWIN=yes;;
         * ) CYGWIN=no;;
esac
AC_EXEEXT
AC_OBJEXT

resource_FILES=""
if test "$CYGWIN" = "yes" -o "$MINGW32" = "yes" ; then
  AC_DEFINE(FD_SETSIZE, 4096, [Make CygWin / MinGW32 use large FD sets.])
  AC_DEFINE(WIN32_LEAN_AND_MEAN, 1, [Define for faster code generation.])
  AC_CHECK_LIB(advapi32, main, EXTRALIBS="$EXTRALIBS -ladvapi32")
  AC_CHECK_LIB(shell32, main, EXTRALIBS="$EXTRALIBS -lshell32")
  AC_CHECK_LIB(user32, main, EXTRALIBS="$EXTRALIBS -luser32")
  resource_FILES="serveez.rc"
  if test "$MINGDIR" != "no" -a "$MINGW32" != "yes" ; then
    CFLAGS="$CFLAGS -mno-cygwin -I${MINGDIR}/include"
    LDFLAGS="$LDFLAGS -mno-cygwin -L${MINGDIR}/lib"
    AC_CHECK_LIB(ws2_32, main, EXTRALIBS="$EXTRALIBS -lws2_32")
    AC_CHECK_LIB(mswsock, main, EXTRALIBS="$EXTRALIBS -lmswsock")
    AC_MSG_RESULT([using MinGW32 headers and libraries in ${MINGDIR}])
  fi
  if test "$MINGW32" = "yes" ; then
    AC_CHECK_LIB(ws2_32, main, EXTRALIBS="$EXTRALIBS -lws2_32")
    AC_CHECK_LIB(mswsock, main, EXTRALIBS="$EXTRALIBS -lmswsock")
  fi
fi
AC_SUBST(resource_FILES)

dnl ----------------------------------------------------------------------

dnl
dnl Checking for libtool support.
dnl 

AC_LIBTOOL_WIN32_DLL
AC_PROG_LIBTOOL

dnl ----------------------------------------------------------------------

dnl
dnl Check Guile installation.
dnl

AC_GUILE
AC_GUILE_SOURCE
AC_GUILE_CHECK

dnl ----------------------------------------------------------------------

dnl
dnl Check if guile servers should be included.
dnl

AC_MSG_CHECKING([whether to include guile server support])
AC_ARG_ENABLE([guile-server],
  [  --disable-guile-server  Include guile servers @<:@default=yes@:>@],
  if test x$enableval = "xyes" ; then
    define_enable_guile=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_guile=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_guile=yes
  AC_MSG_RESULT([yes]))

if test $define_enable_guile = yes ; then
  AC_DEFINE(ENABLE_GUILE_SERVER, 
    1, [Define if guile servers should be supported.])
fi
unset define_enable_guile

dnl ----------------------------------------------------------------------

dnl
dnl Check whether to include support for named pipes under Linux.
dnl

AC_CHECK_FUNCS(mkfifo mknod sendfile)

dnl
dnl Create additional CFLAGS for MinGW32 and CygWin.
dnl

SERVEEZ_CFLAGS=""
if test "$CYGWIN" = "yes" -o "$MINGW32" = "yes"; then
    if test "x$enable_shared" = "xyes"; then
	SERVEEZ_CFLAGS="-D__SERVEEZ_IMPORT__"
    fi
fi
AC_SUBST(SERVEEZ_CFLAGS)

dnl ----------------------------------------------------------------------

dnl
dnl Check whether to include support for heap counters.
dnl
AC_MSG_CHECKING([whether to enable heap counters])
AC_ARG_ENABLE([heap-count],
  [  --disable-heap-count    Include support for heap counters @<:@default=yes@:>@],
  if test x$enableval = "xyes" ; then
    define_enable_heap=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_heap=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_heap=yes
  AC_MSG_RESULT([yes]))

if test x$define_enable_heap = "xyes" ; then
  AC_DEFINE(ENABLE_HEAP_COUNT, 
    1, [Define if heap counters should be enabled.])
fi
unset define_enable_heap

dnl ----------------------------------------------------------------------

dnl
dnl Check for system header files.
dnl

AC_HEADER_STDC

dnl
dnl Checking for getopt() and getopt_long() functions and headers.
dnl

have_getopt="no"
have_getopt_long="no"
AC_CHECK_FUNC(getopt, have_getopt="yes",
    AC_CHECK_LIB(iberty, getopt, have_getopt="yeslib"))
if test $have_getopt != "no"; then
    AC_DEFINE(HAVE_GETOPT, 
	1, [Define if you have the getopt function.])
fi

AC_CHECK_FUNC(getopt_long, have_getopt_long="yes",
    AC_CHECK_LIB(iberty, getopt_long, have_getopt_long="yeslib"))

dnl
dnl We might declare getopt_long ourselves if the headers do not.
dnl

if test $have_getopt_long != "no"; then
  AC_CACHE_CHECK([whether getopt_long is declared], svz_cv_decl_getopt_long,
    AC_EGREP_HEADER(getopt_long, getopt.h,
      svz_cv_decl_getopt_long=yes,
      svz_cv_decl_getopt_long=no))
  if test $svz_cv_decl_getopt_long = yes ; then
    AC_DEFINE(DECLARED_GETOPT_LONG, 1, 
      [Define if the getopt_long function is declared in <getopt.h>.])
  fi
fi

if test $have_getopt_long != "no"; then
    AC_DEFINE(HAVE_GETOPT_LONG, 
	1, [Define if you have the getopt_long function.])
fi

if test $have_getopt = "yeslib" -o $have_getopt_long = "yeslib"; then
    case $host_os in
    mingw*) LIBS="$LIBS -liberty" ;;
    *)      SERVEEZ_LIBS="$SERVEEZ_LIBS -liberty" ;;
    esac
fi
unset have_getopt
unset have_getopt_long

dnl
dnl Check if libtool copes with SunOS/Solaris.  GNU libtool 1.4.2 and less
dnl fail to create self-contained shared libraries.  This is due to the gcc
dnl - native linker combination.  The below macro adds the -liberty path 
dnl and -lgcc to the linker line if necessary.
dnl

AC_LIBTOOL_SOLARIS

dnl
dnl Checking for timezone and daylight variables (FreeBSD and NetBSD
dnl do not provide).
dnl

AC_CACHE_CHECK([for timezone and daylight variables], svz_cv_var_timezone,
  AC_TRY_LINK(
    [extern long int timezone; extern int daylight;],
    [long int t = timezone; int d = daylight; return (d + t);],
    svz_cv_var_timezone=yes,
    svz_cv_var_timezone=no))

if test $svz_cv_var_timezone = yes ; then
  AC_DEFINE(HAVE_TIMEZONE, 1, [Define if you have timezone and daylight.])
fi

dnl
dnl bzero() is defined in <strings.h> on AIX, used by FD_ZERO()
dnl There is no <wait.h> on AIX, but <sys/wait.h>.
dnl

AC_CHECK_HEADERS(wait.h strings.h)
AC_HEADER_SYS_WAIT

AC_CHECK_FUNC(strcasecmp,
  AC_DEFINE(HAVE_STRCASECMP, 1, [Define if you have the strcasecmp function.]),
  [AC_CHECK_FUNC(stricmp,
    AC_DEFINE(HAVE_STRICMP, 1, [Define if you have the stricmp function.]))])

AC_CHECK_FUNC(strncasecmp,
  AC_DEFINE(HAVE_STRNCASECMP, 1, 
    [Define if you have the strncasecmp function.]),
  [AC_CHECK_FUNC(strnicmp,
    AC_DEFINE(HAVE_STRNICMP, 1, [Define if you have the strnicmp function.]))])

AC_CHECK_FUNCS(getrlimit getdtablesize getpwnam seteuid setegid geteuid \
  getegid gettimeofday shl_load NSAddImage)
AC_CHECK_HEADERS(stdio.h unistd.h sys/time.h sys/poll.h pwd.h varargs.h \
  getopt.h dlfcn.h sys/sockio.h sys/resource.h sys/sendfile.h sys/uio.h \
  ws2tcpip.h dirent.h sys/dirent.h direct.h dl.h dld.h grp.h \
  mach-o/dyld.h zlib.h bzlib.h rpc/rpcent.h rpc/rpc.h rpc/pmap_clnt.h \
  rpc/pmap_prot.h rpc/clnt_soc.h sys/ioctl.h pthread.h floss.h)
AC_HEADER_DIRENT

dnl
dnl Serveez core library internals (svzconfig.h).
dnl
if test $ac_cv_header_varargs_h = yes; then
  AC_DEFINE(SVZ_HAVE_VARARGS_H, 1, 
    [Define if you have the <varargs.h> header file.])
fi
if test $ac_cv_header_pthread_h = yes; then
  AC_DEFINE(SVZ_HAVE_PTHREAD_H, 1, 
    [Define if you have the <pthread.h> header file.])
fi

dnl
dnl Some installations need <sys/types.h> before <netinet/tcp.h>.
dnl
AC_CACHE_CHECK([for netinet/tcp.h], svz_cv_header_netinet_tcp_h,
AC_TRY_CPP([
    #include <sys/types.h>
    #include <netinet/tcp.h> ],
  svz_cv_header_netinet_tcp_h=yes,
  svz_cv_header_netinet_tcp_h=no))
if test $svz_cv_header_netinet_tcp_h = yes ; then
  AC_DEFINE(HAVE_NETINET_TCP_H, 1, 
    [Define if you have the <netinet/tcp.h> header file.])
fi

dnl
dnl Check if alphasort() is declared.  Also check for alphasort(),
dnl strsignal() and scandir() in -liberty.
dnl
save_LIBS="$LIBS"
LIBS="$LIBS $SERVEEZ_LIBS $EXTRALIBS"
AC_CHECK_FUNCS(alphasort scandir strsignal)
LIBS="$save_LIBS"
unset save_LIBS

if test $ac_cv_header_dirent_h = yes ; then
AC_CACHE_CHECK([whether alphasort is declared], svz_cv_decl_alphasort,
AC_EGREP_HEADER(alphasort, dirent.h,
  svz_cv_decl_alphasort=yes,
  svz_cv_decl_alphasort=no))
else
  svz_cv_decl_alphasort=yes
fi
if test $svz_cv_decl_alphasort = yes ; then
  AC_DEFINE(DECLARED_ALPHASORT, 1,
    [Define if the alphasort function is declared in <dirent.h>.])
fi

LIBSERVEEZLIBS=""

dnl
dnl Checking for shared library loading interface. 
dnl

have_dlopen="no"
AC_CHECK_FUNC(dlopen, have_dlopen="yes",
  AC_CHECK_LIB(dl, dlopen,
    have_dlopen="yes"
    LIBSERVEEZLIBS="$LIBSERVEEZLIBS -ldl"),
  AC_CHECK_LIB(svld, dlopen,
    have_dlopen="yes"
    LIBSERVEEZLIBS="$LIBSERVEEZLIBS -lsvdl"))

if test $have_dlopen = "yes" ; then
  AC_DEFINE(HAVE_DLOPEN, 1, [Define if you have the dlopen function.])
else
  AC_CHECK_LIB(dld, dld_link,
    AC_DEFINE(HAVE_DLD_LINK, 1, [Define if you have the dld_link function.])
    LIBSERVEEZLIBS="$LIBSERVEEZLIBS -ldld")
fi
unset have_dlopen

CODECLIBS=""

dnl
dnl Checking for additional codec libraries.
dnl

AC_CHECK_LIB(z, zlibVersion,
  AC_DEFINE(HAVE_ZLIB, 1, [Define if you have the zlib library.])
  CODECLIBS="$CODECLIBS -lz")

have_bz2=no
AC_CHECK_LIB(bz2, bzCompress, have_bz2=yes,
  [AC_CHECK_LIB(bz2, BZ2_bzCompress, have_bz2=bz2_prefix)])
if test $have_bz2 != no ; then
  AC_DEFINE(HAVE_BZ2LIB, 1, [Define if you have the bz2 library.])
  CODECLIBS="$CODECLIBS -lbz2"
  if test $have_bz2 = bz2_prefix ; then
    AC_DEFINE(HAVE_BZ2LIB_PREFIX, 1, 
      [Define if you have a prefixed bz2 library (>= v1.0)])
  fi
fi

dnl
dnl Check for thread libraries.
dnl

have_threads=no
if test $enable_threads = yes ; then
  if test "$MINGW32" = "yes" ; then
    have_threads=yes
  else
    dnl POSIX
    AC_CHECK_LIB(pthread, pthread_create,
      have_threads=yes
      LIBSERVEEZLIBS="$LIBSERVEEZLIBS -lpthread",
      dnl FreeBSD
      [AC_CHECK_LIB(c_r, pthread_create,
        have_threads=yes
        LIBSERVEEZLIBS="$LIBSERVEEZLIBS -lc_r")])
  fi
fi
if test $have_threads = yes ; then
  AC_DEFINE(SVZ_HAVE_THREADS, 1, [Define if you have a thread library.])
fi
unset enable_threads
unset have_threads

AC_SUBST(LIBSERVEEZLIBS)
AC_SUBST(CODECLIBS)

dnl ----------------------------------------------------------------------

dnl Check for 'uname' interface.

AC_CHECK_HEADERS(sys/utsname.h)
AC_CHECK_FUNCS(uname)

dnl ----------------------------------------------------------------------

dnl Check for the 'kstat' interface on Solaris.

AC_CHECK_LIB(kstat, kstat_open,
    AC_DEFINE(HAVE_LIBKSTAT, 
	1, [Define if Solaris provides the kstat library.])
    EXTRALIBS="$EXTRALIBS -lkstat")

dnl Check for the 'pstat' interface on HP-Unix.

AC_CACHE_CHECK([for pstat_getdynamic], svz_cv_func_pstat,
  AC_EGREP_HEADER(pstat_getdynamic, sys/pstat.h,
    svz_cv_func_pstat=yes,
    svz_cv_func_pstat=no))

if test $svz_cv_func_pstat = yes ; then
  AC_DEFINE(HAVE_PSTAT, 1, [Define if HP-Unix provides the pstat interface.])
fi

dnl Check for the 'sysget' interface on IRIX.

AC_CACHE_CHECK([for sysget], svz_cv_func_sysget,
  AC_EGREP_HEADER(sysget, sys/sysget.h,
    svz_cv_func_sysget=yes,
    svz_cv_func_sysget=no))

if test $svz_cv_func_sysget = yes ; then
  AC_DEFINE(HAVE_SYSGET, 1, [Define if IRIX provides the sysget interface.])
fi

dnl Check for the '/proc/stat' file under Linux.

AC_CACHE_CHECK([whether /proc/stat exists], svz_cv_sys_proc_stat,
  [have_procstat=`cat /proc/stat 2>&1 | grep "cpu  "`
  if test "x$have_procstat" != "x" ; then
    svz_cv_sys_proc_stat=yes
  else
    svz_cv_sys_proc_stat=no
  fi])
unset have_procstat

if test $svz_cv_sys_proc_stat = yes ; then
  case $host_os in
  linux*)
    AC_DEFINE(HAVE_PROC_STAT, 
      1, [Define if Linux supports the /proc/stat file.])
    ;;
  *)
    AC_MSG_WARN([disabled '/proc/stat' since '$host_os' is not 'linux'])
    ;;
  esac
fi

dnl Check for the 'host_statistics' interface on MacOS.

AC_CHECK_FUNC(host_statistics,
  AC_DEFINE(HAVE_HOST_STATISTICS, 
    1, [Define if MacOS provides the host_statistics interface.]))

dnl ----------------------------------------------------------------------

dnl
dnl Check for existence of some useful functions.
dnl
AC_CHECK_FUNCS(vsprintf)
if test $ac_cv_func_vsprintf = no ; then
  AC_MSG_ERROR([cannot compile without vsprintf])
  exit
fi

dnl
dnl Some Unices (e.g. Dec Unix) do not implement snprintf().
dnl
AC_CHECK_FUNC(snprintf, , [AC_CHECK_FUNC(_snprintf)])
if test x$ac_cv_func_snprintf = xyes -o x$ac_cv_func__snprintf = xyes; then
  AC_DEFINE(HAVE_SNPRINTF, 1, [Define if you have the snprintf function.])
  AC_DEFINE(SVZ_HAVE_SNPRINTF, 1, [Define if you have the snprintf function.])
else
  AC_MSG_WARN([using function vsnprintf instead])
fi

AC_CHECK_FUNC(vsnprintf, , [AC_CHECK_FUNC(_vsnprintf)])
if test x$ac_cv_func_vsnprintf = xyes -o x$ac_cv_func__vsnprintf = xyes; then
  AC_DEFINE(HAVE_VSNPRINTF, 1, [Define if you have the vsnprintf function.])
  AC_DEFINE(SVZ_HAVE_VSNPRINTF, 1, 
    [Define if you have the vsnprintf function.])
else
  AC_MSG_WARN([using unsafe function vsprintf instead])
fi

dnl
dnl Check whether extra net libraries are required.
dnl
AC_CHECK_FUNC(connect)
AC_CHECK_FUNC(socketpair)
if test $ac_cv_func_socketpair = no; then
  AC_CHECK_LIB(socket, socketpair, 
    EXTRALIBS="$EXTRALIBS -lsocket"
    have_socketpair="lib")
else
  have_socketpair="yes"
fi
if test x$have_socketpair != x; then
  AC_DEFINE(HAVE_SOCKETPAIR, 1, [Define if you have the socketpair function.])
fi
unset have_socketpair

dnl
dnl Check for Solaris nsl and resolv library.
dnl
AC_CHECK_FUNC(gethostbyaddr)
if test $ac_cv_func_gethostbyaddr = no; then
    AC_CHECK_LIB(nsl, gethostbyaddr, EXTRALIBS="$EXTRALIBS -lnsl")
fi
have_inet_aton="no"
AC_CHECK_FUNC(inet_aton, have_inet_aton="yes")
if test $ac_cv_func_inet_aton = no; then
    AC_CHECK_LIB(resolv, inet_aton,
	have_inet_aton="yes"
	EXTRALIBS="$EXTRALIBS -lresolv")
fi
if test $have_inet_aton = "yes"; then
    AC_DEFINE(HAVE_INET_ATON, 1, [Define if you have the inet_aton function.])
fi
unset have_inet_aton

dnl
dnl Check for broken inet_ntoa ()
dnl
dnl  It is not really that inet_ntoa() is broken. Some (old) gcc versions
dnl  on IRIX handle small structs wrong. As of gcc 2.95 this should be
dnl  fixed but we do not really know. To work around we implement inet_ntoa()
dnl  on our own if it does not work.
dnl
AC_CACHE_CHECK([whether inet_ntoa is broken], svz_cv_func_inet_ntoa_broken,
AC_TRY_RUN([#include <stdio.h>
    #include <sys/types.h>
    #include <netinet/in.h>
    #include <arpa/inet.h>
    main () {
	struct in_addr ip;
	ip.s_addr = htonl (0x12345678);
	if (strcmp (inet_ntoa (ip), "18.52.86.120"))
	    exit (0);
	exit (1);}],
   svz_cv_func_inet_ntoa_broken=yes,
   svz_cv_func_inet_ntoa_broken=no,
   svz_cv_func_inet_ntoa_broken=no))

if test $svz_cv_func_inet_ntoa_broken = yes ; then
   AC_DEFINE(BROKEN_INET_NTOA, 1, [Define if inet_ntoa function is broken.])
fi

dnl
dnl Check for typedef socklen_t in <sys/socket.h>.
dnl
AC_CACHE_CHECK([for socklen_t], svz_cv_type_socklen_t,
AC_EGREP_HEADER(socklen_t,
  sys/socket.h,
  svz_cv_type_socklen_t=yes,
  svz_cv_type_socklen_t=no))

if test $svz_cv_type_socklen_t = no ; then
  AC_DEFINE(socklen_t, int, 
    [Define to 'int' if <sys/socket.h> does not define.])
fi

dnl
dnl Check for the typedef SOCKET and HANDLE in <winsock2.h>.
dnl
socket_defined="int"
handle_defined="int"

if test "$MINGDIR" != "no"; then
    AC_CHECK_HEADER(winsock2.h, 
	socket_defined="SOCKET"
	handle_defined="HANDLE"
	AC_DEFINE(Win32_Winsock, 1, 
	    [Define if you are using Windows Socket-API (not CYGWIN).])
	AC_DEFINE(HAVE_WINSOCK2_H, 1, 
	    [Define if you have the <winsock2.h>]))
fi

AC_DEFINE_UNQUOTED(svz_t_socket, $socket_defined,
  [Define to 'int' if <winsock2.h> does not define 'SOCKET'.])

AC_DEFINE_UNQUOTED(svz_t_handle, $handle_defined,
  [Define to 'int' if <winsock2.h> does not define 'HANDLE'.])

unset socket_defined
unset handle_defined

AC_CHECK_HEADERS([mswsock.h], [], [],
[#if HAVE_WINSOCK2_H
# include <winsock2.h>
#endif
])

dnl
dnl Determine the return type of signal handlers.
dnl
AC_TYPE_SIGNAL
if test $ac_cv_type_signal != void ; then
    AC_DEFINE(NONVOID_SIGNAL, 1, [Define if signal()s are non-void.])
fi
AC_DEFINE_UNQUOTED(svz_t_retsig, $ac_cv_type_signal,
  [Define the signal()'s detected return type.])

AC_TYPE_SIZE_T
size_t_defined="size_t"
if test $ac_cv_type_size_t = no; then
  size_t_defined="unsigned"
fi
AC_DEFINE_UNQUOTED(svz_t_size, $size_t_defined,
  [Define to `unsigned' if <sys/types.h> doesn't define 'size_t'.])
unset size_t_defined

AC_TYPE_OFF_T
off_t_defined="off_t"
if test $ac_cv_type_off_t = no; then
  off_t_defined="long"
fi
AC_DEFINE_UNQUOTED(svz_t_off, $off_t_defined,
  [Define to `long' if <sys/types.h> doesn't define 'off_t'.])
unset off_t_defined

AC_TYPE_MODE_T

dnl
dnl Checking for crypt() function.
dnl

MKPASSWORD=""
if test $define_enable_crypt = yes ; then
    have_crypt=no
    AC_CHECK_FUNC(crypt, have_crypt=yes,
	AC_CHECK_LIB(descrypt, crypt, 
	    have_crypt=yes
	    EXTRALIBS="$EXTRALIBS -ldescrypt",
	    AC_CHECK_LIB(crypt, crypt, 
		have_crypt=yes
		EXTRALIBS="$EXTRALIBS -lcrypt")))

    if test $have_crypt = yes ; then
	AC_DEFINE(SVZ_HAVE_CRYPT, 1, [Define if you have the crypt function.])
	MKPASSWORD="mkpassword"
    fi
    unset have_crypt
fi
unset define_enable_crypt
AC_SUBST(MKPASSWORD)

dnl
dnl Check for hstrerror(), h_errno and strsignal() functions.
dnl

AC_CACHE_CHECK([whether strsignal is declared], svz_cv_decl_strsignal,
AC_EGREP_CPP(strsignal, [
    #define _GNU_SOURCE
    #define __EXTENSIONS__
    #include <string.h> ],
  svz_cv_decl_strsignal=yes,
  svz_cv_decl_strsignal=no))
if test $svz_cv_decl_strsignal = yes ; then
  AC_DEFINE(DECLARED_STRSIGNAL, 1, 
    [Define if the strsignal function is declared in <string.h>.])
fi

AC_CHECK_FUNC(hstrerror, have_hstrerror=yes,
  AC_CHECK_LIB(resolv, hstrerror, have_hstrerror=yes, have_hstrerror=no))
if test $have_hstrerror = yes ; then
  AC_DEFINE(HAVE_HSTRERROR, 1, [Define if you have the hstrerror function.])
fi
AC_CACHE_CHECK([whether hstrerror is declared], svz_cv_decl_hstrerror,
AC_EGREP_HEADER(hstrerror, netdb.h,
  svz_cv_decl_hstrerror=yes,
  svz_cv_decl_hstrerror=no))
if test $svz_cv_decl_hstrerror = yes ; then
  AC_DEFINE(DECLARED_HSTRERROR, 1, 
    [Define if the hstrerror function is declared in <netdb.h>.])
fi

AC_CACHE_CHECK([for h_errno], svz_cv_var_h_errno,
AC_EGREP_HEADER(h_errno, netdb.h,
  svz_cv_var_h_errno=yes,
  svz_cv_var_h_errno=no))
if test $svz_cv_var_h_errno = yes ; then
  AC_DEFINE(HAVE_H_ERRNO, 1, [Define if h_errno is supported.])
fi

dnl
dnl Check for more functionality used in Serveez.
dnl
AC_CHECK_FUNCS(times poll waitpid)

dnl
dnl Checks for RPC services.
dnl
AC_CHECK_FUNCS(getrpcent)
if test $ac_cv_func_getrpcent = no ; then
    dnl On HP-UX these functions reside in -lnsl
    AC_CHECK_LIB(nsl, getrpcent, EXTRALIBS="$EXTRALIBS -lnsl")
fi
save_LIBS="$LIBS"
LIBS="$LIBS $EXTRALIBS"
AC_CHECK_FUNCS(getrpcbyname getrpcbynumber setrpcent endrpcent \
  pmap_set pmap_unset pmap_getmaps get_myaddress)
LIBS="$save_LIBS"
unset save_LIBS

AC_CACHE_CHECK([whether setrpcent is declared], svz_cv_decl_setrpcent,
svz_cv_decl_setrpcent=no
AC_EGREP_HEADER(setrpcent, netdb.h, svz_cv_decl_setrpcent=yes)
AC_EGREP_HEADER(setrpcent, rpc/rpcent.h, svz_cv_decl_setrpcent=yes))
if test $svz_cv_decl_setrpcent = yes ; then
  AC_DEFINE(DECLARED_SETRPCENT, 1, 
    [Define if the setrpcent function is declared in <netdb.h>.])
fi
AC_CACHE_CHECK([whether endrpcent is declared], svz_cv_decl_endrpcent,
svz_cv_decl_endrpcent=no
AC_EGREP_HEADER(endrpcent, netdb.h, svz_cv_decl_endrpcent=yes)
AC_EGREP_HEADER(endrpcent, rpc/rpcent.h, svz_cv_decl_endrpcent=yes))
if test $svz_cv_decl_endrpcent = yes ; then
  AC_DEFINE(DECLARED_ENDRPCENT, 1, 
    [Define if the endrpcent function is declared in <netdb.h>.])
fi

dnl
dnl Find a working signed keyword.
dnl
AC_CACHE_CHECK([for working signed], svz_cv_c_signed,
[AC_TRY_COMPILE([#include <stdio.h>],
  [signed char have_signed = (signed char) 0;],
  svz_cv_c_signed=yes
  signed_defined="signed",
  svz_cv_c_signed=no
  signed_defined="")])

AC_DEFINE_UNQUOTED(svz_c_signed, $signed_defined,
  [Define to empty if the keyword does not work.])

unset signed_defined

dnl
dnl Check for working Tex.
dnl
AC_MSG_CHECKING([for working texi2dvi])
TEXI2DVI="texi2dvi"
if test "x`eval tex --version 2>/dev/null`" = "x"; then
  AC_MSG_RESULT(missing)
  TEXI2DVI=":"
else
  AC_MSG_RESULT($TEXI2DVI)
fi
AC_SUBST(TEXI2DVI)

dnl
dnl Checking for working Texi2HTML.
dnl
AC_MSG_CHECKING([for working texi2html])
TEXI2HTML=":"
[tex=`eval texi2html --version 2>/dev/null | head -1 | sed 's/[^0-9\.]//g'`]
if test -n "$tex"; then
case "$tex" in
  [1.6[4-9] | 1.[789]* | [2-9].*)]
    AC_MSG_RESULT($tex >= 1.64)
    TEXI2HTML="texi2html"
  ;;
  [*)]
    AC_MSG_RESULT($tex < 1.64)
  ;;
esac
else
  AC_MSG_RESULT(missing)
fi
AC_SUBST(TEXI2HTML)
unset tex

dnl
dnl Checking for working Makeinfo.
dnl
AC_MSG_CHECKING([for working makeinfo])
MAKEINFO="$missing_dir/missing makeinfo"
[info=`eval makeinfo --version 2>/dev/null | head -1 | \
       sed -e 's/[^(][^(]*(\([^)][^)]*\))[^)][^)]*/\1/g' -e 's/[^0-9\.]//g'`]
[if test -z "$info" ; then
  info=`eval makeinfo --version 2>/dev/null | head -1 | sed 's/[^0-9\.]//g'`
fi]
if test -n "$info"; then
case "$info" in
  [4.* | [5-9].*)]
    AC_MSG_RESULT($info >= 4.0)
    MAKEINFO="makeinfo"
  ;;
  [*)]
    AC_MSG_RESULT($info < 4.0)
  ;;
esac
else
    AC_MSG_RESULT(missing)
fi
AC_SUBST(MAKEINFO)
unset info

dnl
dnl Checking for RPM builder version
dnl
RPM=":"
if test $USE_MAINTAINER_MODE = yes; then
AC_MSG_CHECKING([for working rpm])
[version=`eval rpm --version 2>/dev/null | sed 's/[^0-9\.]//g'`]
if test -n "$version"; then
case "$version" in
  [3.* | [4-9].*)]
    AC_MSG_RESULT($version >= 3.0.0)
    RPM="rpm"
    RPM3="yes"
  ;;
  [*)]
    AC_MSG_RESULT($version < 3.0.0)
    RPM="rpm"
    RPM3="no"
  ;;
esac
else
    AC_MSG_RESULT(missing)
fi
unset version
fi
AC_SUBST(RPM)
AC_SUBST(RPM3)

LIBS="$LIBS $EXTRALIBS"
CPPFLAGS=$CPPEXTRAFLAGS

TIMESTAMP=`date '+%a %b %_d %H:%M:%S %Y' 2>/dev/null`
if test -z "$TIMESTAMP" ; then
    dnl On HP-UX each item is padded with spaces by default.
    TIMESTAMP=`date '+%a %b %d %H:%M:%S %Y' 2>/dev/null`
fi
AC_SUBST(TIMESTAMP)

dnl For GNU/Linux Debian packaging only
TIMESTAMP_RFC822=`date -R 2>/dev/null`
AC_SUBST(TIMESTAMP_RFC822)

REDHAT_TOPDIR=/opt
AC_SUBST(REDHAT_TOPDIR)

dnl
dnl Setup configuration variables.
dnl
SERVEEZ_CONFIG_CFLAGS="-I$prefix/include"
if test "x$SERVEEZ_CFLAGS" != "x" ; then
  SERVEEZ_CONFIG_CFLAGS="$SERVEEZ_CONFIG_CFLAGS $SERVEEZ_CFLAGS"
fi
if test "x$enable_shared" = "xyes" ; then
  SERVEEZ_CONFIG_LDFLAGS="-L$prefix/lib -lserveez"
else
  SERVEEZ_CONFIG_LDFLAGS="$prefix/lib/libserveez.a"
fi
AC_SUBST(SERVEEZ_CONFIG_CFLAGS)
AC_SUBST(SERVEEZ_CONFIG_LDFLAGS)

dnl
dnl Output files.
dnl
AC_OUTPUT(
    Makefile src/Makefile src/libserveez/Makefile
    src/libserveez/coserver/Makefile
    src/libserveez/codec/Makefile
    src/serveez-config
    src/awcs-server/Makefile
    src/ctrl-server/Makefile
    src/http-server/Makefile
    src/irc-core/Makefile
    src/irc-server/Makefile
    src/foo-server/Makefile
    src/sntp-server/Makefile
    src/nut-server/Makefile
    src/tunnel-server/Makefile
    src/fakeident-server/Makefile
    src/prog-server/Makefile
    src/guile-server/Makefile
    doc/Makefile 
    data/Makefile
    test/Makefile
    redhat.sh
    debian.sh
    version.h)

dnl
dnl Apply executable permissions to scripts.
dnl
chmod +x redhat.sh
chmod +x debian.sh

dnl
dnl Print results.
dnl
AC_MSG_RESULT([])
AC_MSG_RESULT([	$PACKAGE version $VERSION configured successfully.])
AC_MSG_RESULT([])

dnl
dnl Configure local guile source tree.
dnl

AC_GUILE_CONFIGURE
