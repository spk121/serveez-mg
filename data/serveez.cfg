;; -*-scheme-*-
;;
;; serveez.cfg - example configuration file
;;
;; Copyright (C) 2001, 2002 Stefan Jahn <stefan@lkcc.org>
;; Copyright (C) 2001 Raimund Jacob <raimi@lkcc.org>
;;
;; This is free software; you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.
;; 
;; This software is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;; 
;; You should have received a copy of the GNU General Public License
;; along with this package; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.
;;
;; $Id: serveez.cfg,v 1.38 2002/09/28 10:33:48 ela Exp $
;;

;; === Load convenience file =================================================
(serveez-load "serveez.scm")

;; === Greet the user ========================================================
(printsln " "
	  "** Welcome to Serveez" serveez-version 
	  "using Guile" guile-version
	  (if have-debug
	      "(debugging enabled)"
	      ""
	   ))

(if have-Win32
    (println "* This is the Win32 port, good luck."))

(interface-add! "127.0.0.2")
(println "Serveez interfaces: " (serveez-interfaces))

(loadpath-add! "/usr/local/lib")
(println "Serveez loadpath: " (serveez-loadpath))

;; Example foo server. =======================================================
(define-port! 'foo-port '(
			  ;; usual settings
			  (proto  . tcp)
			  (port   . 42421)
			  (ipaddr . *)

			  ;; enhanced settings
			  (backlog           . 5)
			  (connect-frequency . 1)
			  (send-buffer-size  . 1024)
			  (recv-buffer-size  . 1024)
			  (allow             . (127.0.0.1 127.0.0.2))
			  (deny              . (192.168.2.7))
			  ))

(define-server! 'foo-server '(
			      (bar . 100)
			      (reply . "Booo")
			      (messages . ("Welcome to the foo test server."
					   "This one echos your lines."))
			      (ports . (5 6 7 8 9))
			      (port . foo-port)
			      (assoc . (( "GNU" . "great") 
					( "Tree" . "tall" )))
			      (truth . #f)
			      ))

(bind-server! 'foo-port 'foo-server)

;; Chat server. ==============================================================
(define-port! 'textSure-port `(
			       (proto . tcp)
			       (port . ,(+ 42418 2))
			       ))

(define-port! 'textSure-port-pipe `(
				    (proto . pipe)
				    (recv . ((name . ".aWCSrecv")
					     (permissions . #o0666)
					     (user . "stefan")
					     (uid . 50)
					     (group . "users")
					     (gid . 100)))
				    (send . ((name . ".aWCSsend")
					     (permissions . #o0666)
					     (user . "stefan")
					     (uid . 50)
					     (group . "users")
					     (gid . 100)))
				    ))

(define-server! 'aWCS-server)
(bind-server! 'textSure-port 'aWCS-server)
(bind-server! 'textSure-port-pipe 'aWCS-server)

;; Control protocol server for remote control. ===============================
(define-port! 'control-port `(
			      (proto . tcp)
			      (port . 42420)
			      (ipaddr . *)
			      ))

(define-server! 'control-server)

(bind-server! 'control-port 'control-server)

;; Definition of a fake ident server. ========================================
(define-port! 'ident-port `(
			    (proto . tcp)
			    (port . 113)
			    (ipaddr . *)
			    ))

(define-server! 'fakeident-server '(
				    (systemtype . UNIX)
				    (username . SupaRaimi)
				    ))

(bind-server! 'ident-port 'fakeident-server)

;; The tunnel server 1 and 2 create a tunnel between the local telnet ========
;; daemon and a tcp connection. ==============================================
(define-port! "tunnel-source1" '(("proto" . "tcp")
				 ("port" . 42425)
				 ("ipaddr" . "127.0.0.1")))
(define-port! "tunnel-target1" '(("proto"  . "icmp")
				 ("ipaddr" . "127.0.0.1")
				 (type . 8)))
(define-port! "tunnel-source2" '(("proto"  . "icmp")
				 ("ipaddr" . "127.0.0.1")
				 (type . 8)))
(define-port! "tunnel-target2"  '(("proto" . "tcp")
				 ("port" . 23)
				 ("ipaddr" . "127.0.0.1")))

(define-server! 'tunnel-server1 '(("source" . "tunnel-source1")
				  ("target" . "tunnel-target1")))
(define-server! 'tunnel-server2 '(("source" . "tunnel-source2")
				  ("target" . "tunnel-target2")))

(bind-server! "tunnel-source1" "tunnel-server1")
(bind-server! "tunnel-source2" "tunnel-server2")

;; Tunnel server 3 and 4 form an UDP tunnel on arbitrary ports. ==============
(define-port! "tunnel-source3" '(("proto" . "tcp")
				 ("port" . 42426)
				 ("ipaddr" . "127.0.0.1")))
(define-port! "tunnel-target3" '(("proto"  . "udp")
				 ("port" . 12345)
				 ("ipaddr" . "127.0.0.1")))
(define-port! "tunnel-target4" '(("proto" . "tcp")
				 ("port" . 80)
				 ("ipaddr" . "127.0.0.1")))

(define-server! 'tunnel-server3 '(("source" . "tunnel-source3")
				  ("target" . "tunnel-target3")))
(define-server! 'tunnel-server4 '(("source" . "tunnel-target3")
				  ("target" . "tunnel-target4")))

(bind-server! "tunnel-source3" "tunnel-server3")
(bind-server! "tunnel-target3" "tunnel-server4")

;; Tunnel server 5 and 6 form a PIPE tunnel on arbitrary pipes. ==============
(define-port! "tunnel-source5" '(("proto" . "tcp")
				 ("port" . 42429)))
(define-port! "tunnel-target5" '(("proto"  . "pipe")
				 ("recv" . ".preceive")
				 ("send" . ".psend")))
(define-port! "tunnel-source6" '(("proto"  . "pipe")
				 ("recv" . ".psend")
				 ("send" . ".preceive")))
(define-port! "tunnel-target6" '(("proto" . "tcp")
				 ("port" . 23)
				 ("ipaddr" . "127.0.0.1")))

(define-server! 'tunnel-server5 '(("source" . "tunnel-source5")
				  ("target" . "tunnel-target5")))
(define-server! 'tunnel-server6 '(("source" . "tunnel-source6")
				  ("target" . "tunnel-target6")))

(bind-server! "tunnel-source5" "tunnel-server5")
(bind-server! "tunnel-source6" "tunnel-server6")

;; Tunnel 7 forms a PIPE tunnel to the aWCS server. ==========================
(define-port! "tunnel-source7" '(("proto" . "tcp")
				 ("port" . 42428)))
(define-port! "tunnel-target7" '(("proto" . "pipe")
				 ("recv" . ".aWCSsend")
				 ("send" . ".aWCSrecv")))
(define-server! 'tunnel-server7 '(("source" . "tunnel-source7")
				  ("target" . "tunnel-target7")))

(bind-server! "tunnel-source7" "tunnel-server7")

;; Gnutella spider instance. =================================================
(define-server! 'nut-server '(
			      ("hosts" . ("127.0.0.1:6346"
					  "146.145.85.34:6346"
					  "127.0.0.1:5634"))
			      ("ttl" . 7)
			      ("max-ttl" . 7)
			      ("download-path" . "./share")
			      ("share-path" . "./share")
			      ("search" . ("Puppe3000" "Meret Becker"))
			      ("search-limit" . 30)
			      ("max-downloads" . 4)
			      ("max-uploads" . 4)
			      ("connection-speed" . 64)
			      ("min-speed" . 0)
			      ("file-extensions" . ("mp3" "mp2" "mpeg"))
			      ("connections" . 4)
			      ("net-url" . "gnutella-net")
			      ("disable" . #f)
			      ))

(define-port! 'nut-port '((proto . tcp)
			  (port . 6346)))
(bind-server! 'nut-port 'nut-server)

;; Simple Network Time Protocol server. ======================================
(define-server! 'sntp-server)
(define-port! 'sntp-port '((proto . udp)
			   (port . 54321)))
(bind-server! 'sntp-port 'sntp-server)

;; Fast and reliably Web Server. =============================================
(define-port! 'http-port '(
			   ("proto"  . "tcp")
			   ("port"   . 42422)
			   ("ipaddr" . "*")))

(define-server! 'http-server '(
	      ;; standard properties
              ("admin"        . "stefan@lkcc.org")
              ("host"         . "bono.reversers.net")
              ("logfile"      . "http-access.log")
              ("logformat"    . "%h %i %u [%t] \"%R\" %c %l")
              ("indexfile"    . "index.html")
              ("docs"         . "/")
              ("userdir"      . "public_html")
              ("type-file"    . "/etc/mime.types")
              ("default-type" . "text/plain")
              ("nslookup"     . on)
              ("ident"        . yes)

              ;; cgi interface
              ("cgi-url"         . "/cgi-bin")
              ("cgi-dir"         . "../../textsure/cserver/cgibin")
              ("cgi-application" . (("pl"  . "perl")
                                    ("scm" . "sizzle -s")))
	      ))

(bind-server! 'http-port 'http-server)

;; Internet Relay Chat server. ===============================================
(define-port! 'irc-port '(("proto"  . "tcp")
			  ("port"   . 42424)
			  ("ipaddr" . "*")))

(define-server! 'irc-server `(

      ;; location of the "message of the day" file
      ("MOTD-file" . "../data/irc-MOTD.txt")

      ;; timestamp delta value in seconds
      ("tsdelta" . ,(* 3600 0))

      ;; maximum number of channels per user
      ("channels-per-user" . 10)

      ;; administrative information
      ("admininfo" . "World's best IRC server")

      ;; M-line: location, department (university), email address(es)
      ("A-line" . "A:TU Berlin:Berlin, Germany:raimi@lkcc.org")

      ;; M-line
      ("M-line" . "M:141.45.240.162:127.0.0.1:this is for info:42424")

      ;; C-lines
      ("C-lines" .
       (
	"C:edge.reversers.net:secret:edge.reversers.net:6667:2"
	"C:bono.reversers.net:oddity:bono.reversers.net:6667:2"
	))

      ;; I-lines
      ("I-lines" .
       (
	"I:NOMATCH::*@*::100"
	))

      ;; O-lines
      ("O-lines" .
       (
	"O:stefan@bono.reversers.net:serveez:stefan::4"
	))
      ))

(bind-server! 'irc-port 'irc-server)

;; Definition of a non-existing server. ======================================
(define-port! 'q3key-port `(
			    (proto . udp)
			    (port  . 27952)
			    ))

;;(define-server! 'q3key-server '(
;;				(echo . "Q3 Key Server (Serveez)")
;;				(logfile . "q3key-access.log")
;;
;;				))
;;(bind-server! 'q3key-port 'q3key-server)

;;
;; === general options for serveez
;;

;; log level 0..4 (lesser values mean fewer logging messages)
;; use 0 for production environment
(serveez-verbosity 4)

;; maximum accepted remote connections
(serveez-maxsockets 100)

;; password for the control protocol (plain/crypted)
(serveez-passwd "secret")
;;(serveez-passwd "xmA9CY34MxkGg")

;;
;; If you want to include more settings from other files use this.
;;
;;(primitive-load "otherfile.cfg")
;;(serveez-load "otherfile.cfg")
